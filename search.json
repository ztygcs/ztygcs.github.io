[{"categories":["posts"],"content":"给你一个字符串 date ，按 YYYY-MM-DD 格式表示一个 现行公元纪年法 日期。请你计算并返回该日期是当年的第几天。\n通常情况下，我们认为 1 月 1 日是每年的第 1 天，1 月 2 日是每年的第 2 天，依此类推。每个月的天数与现行公元纪年法（格里高利历）一致。\n示例 1：\n1 2  输入：date = \"2019-01-09\" 输出：9   示例 2：\n1 2  输入：date = \"2019-02-10\" 输出：41   示例 3：\n1 2  输入：date = \"2003-03-01\" 输出：60   示例 4：\n1 2  输入：date = \"2004-03-01\" 输出：61    提示：\n1 2 3  date.length == 10 date[4] == date[7] == '-'，其他的 `date[i]` 都是数字 date表示的范围从 1900 年 1 月 1 日至 2019 年 12 月 31 日    来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/day-of-the-year\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处 解答\r\r 1 2 3 4 5 6 7 8 9 10 11 12 13 14  /** * @param {string} date * @return {number} */ var dayOfYear = function (date) { var year = +date.split('-')[0] var month = +date.split('-')[1] var day = +date.split('-')[2] // 遍历month之前所有月的天数累加到day上  for (var i = 1; i \u003c month; i++) { day += new Date(year, i, 0).getDate() } return day };   ","description":"","title":"一年中的第几天","uri":"/posts/%E5%8A%9B%E6%89%A3/%E4%B8%80%E5%B9%B4%E4%B8%AD%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9/"},{"categories":["posts"],"content":" MemE 通过 Hugo 管道实现使用 SCSS 生成 CSS，而非静态的 CSS 文件，同时提供一个 \\_custom.scss 文件以供用户定制。\n直接新建一个 ~/blog/assets/scss/custom/_custom.scss 并将你自己的样式加入其中，就能覆盖主题的 ~/blog/themes/meme/assets/scss/custom/_custom.scss 文件，且其会正确地被应用。\n事实上，在 Hugo 中你可以覆盖主题的任何模板，见这个非官方的镜像网页：https://gohugobrasil.netlify.com/themes/customizing/\n 在这里自定义的组件均采用shortcodes + 自定义样式的方式实现，其中：\n   文件 文件路径 📂     .html ~\\blog\\layouts\\shortcodes   .scss ~\\blog\\assets\\scss\\custom     文中所涉及到的文件夹\\文件若不存在则需自行创建 所有的独立样式文件需要 import 到 \\_custom.scss\u003e 文件中 具体使用方法请查看每个组件的详细使用教程  参考：《自定义 Hugo Shortcodes 简码》\n排版  在blog\\layouts\\shortcodes\\align.html中增加以下内容：  1  \u003cp style=\"text-align:{{ index .Params 0 }}\"\u003e{{ index .Params 1 | markdownify }}\u003c/p\u003e   示例：  1  {{\u003c align left \"文字居左\" \u003e}}   文字居左\n1  {{\u003c align center \"文字居中\" \u003e}}   文字居中\n1  {{\u003c align right \"文字居右\" \u003e}}   文字居右\n下划线  在blog\\layouts\\shortcodes\\underline.html中增加以下内容：  1 2 3  \u003cspan style=\"border-bottom: {{ .Get \"color\" }} 2px solid\"\u003e {{ .Get \"content\" }} \u003c/span\u003e   示例  1 2 3  {{\u003c underline color=\"#ffdd00\" content=\"谁在用琵琶弹奏一曲东风破\" \u003e}} \u003cbr/\u003e {{\u003c underline color=\"#ff2200\" content=\"岁月在墙上剥落看见小时候\" \u003e}}   谁在用琵琶弹奏一曲东风破\r\r 岁月在墙上剥落看见小时候\r\r诗歌引用  在blog\\layouts\\shortcodes\\quote-center.html中增加以下内容：  1 2 3 4 5 6  \u003cblockquote class=\"quote-center\"\u003e {{- $content := .Inner | markdownify -}} {{- if not (strings.HasPrefix $content \" \u003cp\u003e\") }} {{ printf `\u003c/p\u003e \u003cp\u003e%s\u003c/p\u003e ` $content | safeHTML }} {{- else }} {{- $content }} {{- end -}} \u003c/blockquote\u003e   在 \\blog\\assets\\scss\\custom\\_shortcodes.scss 中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  // 诗歌引用格式 blockquote.quote-center { position: relative; border-left: none; padding-left: 0; border-top: 1px solid var(--color-contrast-lower); border-bottom: 1px solid var(--color-contrast-lower); p { text-align: center !important; margin-top: 1.5em; margin-bottom: 1.5em; } \u0026::before { position: absolute; left: 0; content: '“'; color: var(--color-contrast-low); font-size: 3em; font-weight: bold; margin-top: -0.42em; } \u0026::after { position: absolute; right: 0; content: '”'; color: var(--color-contrast-low); font-size: 3em; font-weight: bold; margin-top: -0.7em; } }   在\\blog\\assets\\scss\\custom\\_custom.scss中导入样式  1  @import 'shortcodes';   示例：  1 2 3  {{\u003c quote-center \u003e}} 伟大的小丑帕格里亚齐来了\u003cbr/\u003e去看他的表演吧\u003cbr/\u003e他能让你振作起来 {{\u003c /quote-center \u003e}}   伟大的小丑帕格里亚齐来了去看他的表演吧他能让你振作起来\n 卡片  在blog\\layouts\\shortcodes\\card.html中增加以下内容：  1 2 3 4 5 6  {{- $raw := (markdownify .Inner | chomp) -}} {{- $block := findRE \"(?is)^\u003c(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\" $raw 1 -}} \u003cdiv class=\"mycard\"\u003e \u003cdiv class=\"content\"\u003e{{- if or $block (not $raw) }}{{ $raw }}{{ else }} {{ $raw }} {{ end -}}\u003c/div\u003e \u003c/div\u003e   在 \\blog\\assets\\scss\\custom\\_card.scss 中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11 12  // 卡片样式 .mycard { padding: 10px 20px; margin: 20px 0; border-radius: 4px; word-break: break-all; background: transparent; box-shadow: 0 6px 10px 0 alpha(var(--color-contrast-high), 0.15); .content { line-height: 30px; } }   在\\blog\\assets\\scss\\custom\\_custom.scss中导入样式  1  @import 'card';   示例：  1 2 3 4 5  {{\u003c card \u003e}} 缓缓飘落的枫叶像思念 \u003cbr /\u003e 我点燃烛火温暖岁末的秋天 {{\u003c /card \u003e}}   缓缓飘落的枫叶像思念 我点燃烛火温暖岁末的秋天\r\r\r文字渐变  在 \\blog\\assets\\scss\\custom\\_colorfont.scss 中增加以下内容：  1 2 3 4 5 6  .colorfulfont { background: linear-gradient(to right, red, #45ed63); -webkit-background-clip: text; background-clip: text; color: transparent; }   在\\blog\\assets\\scss\\custom\\_custom.scss中导入样式  1  @import 'colorfont';   示例：  1  \u003cfont class=\"colorfulfont\"\u003e 伟大的小丑帕格里亚齐来了\u003cbr /\u003e去看他的表演吧\u003cbr /\u003e他能让你振作起来 \u003c/font\u003e   伟大的小丑帕格里亚齐来了去看他的表演吧他能让你振作起来\r\rhugo-notice  在blog\\layouts\\shortcodes\\notice.html中增加以下内容：  1 2 3 4 5 6 7 8 9 10  \u003c!--https://github.com/martignoni/hugo-notice--\u003e {{- $noticeType := .Get 0 -}} {{- $raw := (markdownify .Inner | chomp) -}} {{- $block := findRE \"(?is)^\u003c(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\" $raw 1 -}} {{ $icon := (replace (index $.Site.Data.SVG $noticeType) \"icon\" \"icon notice-icon\") }} \u003cdiv class=\"notice {{ $noticeType }}\" {{ if len .Params | eq 2 }} id=\"{{ .Get 1 }}\" {{ end }}\u003e \u003cdiv class=\"notice-title\"\u003e{{ $icon | safeHTML }}\u003c/div\u003e {{- if or $block (not $raw) }}{{ $raw }}{{ else }} \u003cp\u003e{{ $raw }}\u003c/p\u003e {{ end -}} \u003c/div\u003e   在 \\blog\\assets\\scss\\custom\\_shortcodes.scss 中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  .notice { position: relative; padding: 1em 1em 1em 2.5em; margin: 1em 0; border-radius: 4px; box-shadow: 0 6px 10px 0 alpha(var(--color-contrast-high), 0.15); p:last-child { margin: 0; } .notice-title { position: absolute; left: 0.8em; .notice-icon { width: 1.2em; height: 1.2em; } } \u0026.error { background: hsla(0, 65%, 65%, 0.25); border-left: 5px solid hsl(0, 65%, 55%); word-break: break-all; .notice-title { color: hsl(0, 65%, 55%); } } \u0026.warning { background: hsla(30, 80%, 70%, 0.25); border-left: 5px solid hsl(30, 80%, 55%); word-break: break-all; .notice-title { color: hsl(30, 80%, 55%); } } \u0026.tip { background: hsla(200, 65%, 65%, 0.25); border-left: 5px solid hsl(200, 65%, 55%); word-break: break-all; .notice-title { color: hsl(200, 65%, 55%); } } \u0026.success { background: hsla(140, 65%, 65%, 0.25); border-left: 5px solid hsl(140, 65%, 55%); word-break: break-all; .notice-title { color: hsl(140, 65%, 55%); } } } [data-theme='dark'] .notice { \u0026.error { background: hsla(0, 29%, 41%, 0.65); border-left: 5px solid hsl(0, 67%, 50%); .notice-title { color: hsl(0, 67%, 50%); } } \u0026.warning { background: hsla(28, 46%, 58%, 0.493); border-left: 5px solid hsl(30, 72%, 50%); .notice-title { color: hsl(30, 72%, 50%); } } \u0026.tip { background: hsla(200, 56%, 55%, 0.548); border-left: 5px solid hsl(200, 74%, 57%); .notice-title { color: hsl(200, 74%, 57%); } } \u0026.success { background: hsla(140, 35%, 44%, 0.603); border-left: 5px solid hsl(140, 73%, 55%); .notice-title { color: hsl(140, 73%, 55%); } } }   在\\blog\\assets\\scss\\custom\\_custom.scss中导入样式（若前面已导入则无需重复导入）  1  @import 'shortcodes';   在\\themes\\meme\\data\\SVG.toml文件中插入图标  1 2 3 4 5  # Notice Icon error = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 576 512\"\u003e\u003cpath d=\"M570 440c18 32-5 72-42 72H48c-37 0-60-40-42-72L246 24c19-32 65-32 84 0l240 416zm-282-86a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\"/\u003e\u003c/svg\u003e' warning = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 512 512\"\u003e\u003cpath d=\"M256 8a248 248 0 100 496 248 248 0 000-496zm0 110a42 42 0 110 84 42 42 0 010-84zm56 254c0 7-5 12-12 12h-88c-7 0-12-5-12-12v-24c0-7 5-12 12-12h12v-64h-12c-7 0-12-5-12-12v-24c0-7 5-12 12-12h64c7 0 12 5 12 12v100h12c7 0 12 5 12 12v24z\"/\u003e\u003c/svg\u003e' tip = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 512 512\"\u003e\u003cpath d=\"M504 256a248 248 0 11-496 0 248 248 0 01496 0zm-248 50a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\"/\u003e\u003c/svg\u003e' success = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 512 512\"\u003e\u003cpath d=\"M504 256a248 248 0 11-496 0 248 248 0 01496 0zM227 387l184-184c7-6 7-16 0-22l-22-23c-7-6-17-6-23 0L216 308l-70-70c-6-6-16-6-23 0l-22 23c-7 6-7 16 0 22l104 104c6 7 16 7 22 0z\"/\u003e\u003c/svg\u003e'   示例：  {{\u003cnotice error\u003e}}This is error{{\u003c/notice\u003e}}\r\rThis is error {{\u003cnotice tip\u003e}}This is tip{{\u003c/notice\u003e}}\r\rThis is tip {{\u003cnotice warning\u003e}}This is warning{{\u003c/notice\u003e}}\r\rThis is warning {{\u003cnotice success\u003e}}This is success{{\u003c/notice\u003e}}\r\rThis is success github 风格  在blog\\layouts\\shortcodes\\github.html中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11  \u003cdiv class=\"github\"\u003e \u003cdiv class=\"logo\"\u003e {{ replace $.Site.Data.SVG.repository \"icon\" \"icon github-icon\" | safeHTML }} \u003ca class=\"name\" href={{ .Get \"link\" }} target=\"_blank\"\u003e{{ .Get \"name\" }}\u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"description\"\u003e{{ .Get \"description\" }}\u003c/div\u003e \u003cdiv class=\"language\"\u003e \u003cspan class=\"language-color\" style=\"background-color: {{ .Get \"color\" }}\"\u003e\u003c/span\u003e \u003cspan class=\"language-name\"\u003e{{ .Get \"language\" }}\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e   在 \\blog\\assets\\scss\\custom\\_shortcodes.scss 中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  .github { border: 1px solid var(--color-contrast-low); border-radius: 3px; margin: 0 auto; margin-bottom: 1em; padding: 1em; .github-icon { width: 1.2em; height: 1.2em; margin-right: 0.5em; margin-bottom: 0.2em; fill: var(--color-contrast-high); transition: all 0.5s; } .name { font-weight: bold; color: var(--color-primary); text-decoration: none; } .description { margin-top: 0.5em; margin-bottom: 1em; color: var(--color-contrast-high); text-align: justify; font-size: 90%; transition: all 0.5s; } .language-color { position: relative; top: 1px; display: inline-block; width: 0.75em; height: 0.75em; border-radius: 50%; } .language-name { color: var(--color-contrast-high); font-size: 90%; margin-left: 0.5em; transition: all 0.5s; } }   在\\themes\\meme\\data\\SVG.toml文件中插入图标  1  repository = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" viewBox=\"0 0 16 16\"\u003e\u003cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 2.5C2 1.83696 2.26339 1.20107 2.73223 0.732233C3.20108 0.263392 3.83696 0 4.5 0L13.25 0C13.4489 0 13.6397 0.0790176 13.7803 0.21967C13.921 0.360322 14 0.551088 14 0.75V13.25C14 13.4489 13.921 13.6397 13.7803 13.7803C13.6397 13.921 13.4489 14 13.25 14H10.75C10.5511 14 10.3603 13.921 10.2197 13.7803C10.079 13.6397 10 13.4489 10 13.25C10 13.0511 10.079 12.8603 10.2197 12.7197C10.3603 12.579 10.5511 12.5 10.75 12.5H12.5V10.5H4.5C4.30308 10.5 4.11056 10.5582 3.94657 10.6672C3.78257 10.7762 3.65442 10.9312 3.57816 11.1128C3.50191 11.2943 3.48096 11.4943 3.51793 11.6878C3.5549 11.8812 3.64816 12.0594 3.786 12.2C3.92524 12.3422 4.0023 12.5338 4.00024 12.7328C3.99818 12.9318 3.91716 13.1218 3.775 13.261C3.63285 13.4002 3.4412 13.4773 3.24222 13.4752C3.04325 13.4732 2.85324 13.3922 2.714 13.25C2.25571 12.7829 1.99929 12.1544 2 11.5V2.5ZM12.5 1.5V9H4.5C4.144 9 3.806 9.074 3.5 9.208V2.5C3.5 2.23478 3.60536 1.98043 3.79289 1.79289C3.98043 1.60536 4.23478 1.5 4.5 1.5H12.5ZM5 12.25V15.5C5 15.5464 5.01293 15.5919 5.03734 15.6314C5.06175 15.6709 5.09667 15.7028 5.1382 15.7236C5.17972 15.7444 5.22621 15.7532 5.27245 15.749C5.31869 15.7448 5.36286 15.7279 5.4 15.7L6.85 14.613C6.89328 14.5805 6.94591 14.563 7 14.563C7.05409 14.563 7.10673 14.5805 7.15 14.613L8.6 15.7C8.63714 15.7279 8.68131 15.7448 8.72755 15.749C8.77379 15.7532 8.82028 15.7444 8.8618 15.7236C8.90333 15.7028 8.93826 15.6709 8.96266 15.6314C8.98707 15.5919 9 15.5464 9 15.5V12.25C9 12.1837 8.97366 12.1201 8.92678 12.0732C8.87989 12.0263 8.81631 12 8.75 12H5.25C5.1837 12 5.12011 12.0263 5.07322 12.0732C5.02634 12.1201 5 12.1837 5 12.25Z\"/\u003e\u003c/svg\u003e'   示例：  1 2 3 4 5 6 7  {{\u003c github name=\"hugo-theme-meme\" link=\"https://github.com/reuixiy/hugo-theme-meme\" description=\"MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。同时，希望你将像欣赏一个模因一样欣赏 MemE，希望你将像分享一个模因一样分享 MemE，就像你的博客和文章所做的那样😝！\" color=\"#E34C26\" language=\"HTML\" \u003e}}   \rhugo-theme-meme\r\rMemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。同时，希望你将像欣赏一个模因一样欣赏 MemE，希望你将像分享一个模因一样分享 MemE，就像你的博客和文章所做的那样😝！ \rHTML\r\r\r友链样式  在blog\\layouts\\shortcodes\\friends.html中增加以下内容：  1 2 3 4 5 6 7  \u003cdiv class=\"blogroll\"\u003e \u003cimg class=\"avatar medium-zoom-image\" src=\"{{ .Get \"imgSrc\" }}\" /\u003e \u003ca class=\"friend\" href=\"{{ .Get \"blogSrc\" }}\" target=\"_blank\"\u003e \u003cdiv class=\"name\"\u003e{{ .Get \"name\" }}\u003c/div\u003e \u003cdiv class=\"excerpt\"\u003e{{ .Get \"desc\" }}\u003c/div\u003e \u003c/a\u003e \u003c/div\u003e   在\\blog\\assets\\scss\\custom\\_blogroll.scss中增加以下内容：  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  // 友链样式 .blogroll-link::after { content: ' '; display: block; clear: both; } .blogroll-link { display: grid; grid-gap: 0 1.5em; grid-template-columns: 1fr 1fr; } .blogroll { padding: 1em 0; border-bottom: 1px dashed var(--color-contrast-low); display: flex; transition: all 0.5s; text-decoration: none !important; overflow: hidden; .friend { text-decoration: none; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .name { font-weight: bold; margin: 0.375em 0; } .excerpt { font-size: 0.875em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .avatar { width: 4em !important; height: 4em !important; border-radius: 8px; margin: 0 1em 0 0 !important; z-index: 0; } } @media (max-width: $maxWidth) { .blogroll-link { grid-template-columns: 1fr; } }   示例  1 2 3 4 5 6  {{\u003c friends imgSrc=\"https://ztygcs.github.io/icons/android-chrome-512x512.png\" blogSrc=\"https://ztygcs.github.io/\" name=\"一路向北\" desc=\"学习笔记，生活杂碎\" \u003e}}   一路向北\r学习笔记，生活杂碎\r\r\r","description":"","title":"自定义 Hugo Shortcodes 简码","uri":"/posts/%E5%8D%9A%E5%AE%A2/%E8%87%AA%E5%AE%9A%E4%B9%89-hugo-shortcodes-%E7%AE%80%E7%A0%81/"},{"categories":["posts"],"content":"学习之前 理论基础\r\r\nTypeScript 并不是一门新的语言，准确来说它是 JavaScript 的超集。也就是说所有合法的 JavaScript 语言都可以在 TypeScript 中运行。\n TypeScript 给 JavaScript 带来了强类型的定义。\n 注意：TypeScript 无法在浏览器中运行,因此我们编写完了 TypeScript 代码后需要借助编译器将 TypeScript 语言翻译成 JavaScript。 开发环境\r\r\n在命令行中输入npm install -g typescript完成 TypeScript 的全局安装\nnpm install -g typescript 查看版本信息\ntsc -v 编写完 ts 文件（test.ts）后通过以下指令编译\ntsc test.ts 我们可以看到当前目录下自动创建了一个test.js文件 运行 js 文件\nnode test.js 基础类型学习 数字\r\r\nnumber类型既能表示整数也能表示浮点数，甚至也可以表示正负数\n1 2 3 4 5 6  function add(n1: number, n2: number) { return n1 + n2 } add(1, 2) //正常 add('1', 2) //报错    限制 add 参数 n1 和 n2 必须为 number 类型\n 布尔\r\r\n1  let isTrue: boolean   字符串\r\r\n   字符串 说明     \"hello\" -   'hello' -   `hello` `` 可以创建一个字符串模板，在其中可以实现内容的分段、分行以及填充变量    1 2  let text1: string = 'hello' let text2 = `${text1}world` //``定义模板字符串   数组\r\r\n数组中可以存放任意类型的数据，并且可以同时存在\n1 2 3 4 5 6 7 8 9 10 11  // 定义元素类型为number的数组 let list1: number[] = [1, 2, 3, 4] // 使用泛型定义数组，效果同上 let list2: Array\u003cnumber\u003e = [1, 2, 3, 4] // 不定义类型，效果同上 let list3 = [1, 2, 3, 4] // 这里定义的数组元素类型为（string|number），即元素要么是数字要么是字符串 let list4 = [1, 'ddd'] // 这里定义的数组元素可以存放任意类型 let list5: any[] = [1, 'a', true]   元组\r\r\n1 2  // 其实是一个固定长度、固定类型的数组 let list1: [number, string] = [1, '张三']   联合\r\r\n1 2  // 一个变量可以同时支持两个或多个类型 let union: string | number   字面量\r\r\n1 2 3 4  // 不仅确定类型范围，同时确定了取值范围 let literal: 0 | 1 | 2 // 结合字面量与联合类型灵活运用 let literal2: 1 | 'hello' | true | [1, 2, 3, 4]   枚举\r\r\n 枚举类型，顺序默认从 0 开始，也可自定义\n 1 2 3 4 5 6 7 8  enum Color { red, // =\u003e 0  green, // =\u003e 1  blue // =\u003e 2 } let color = Color.blue // 输出2，对应blue的顺序 console.log(color)   1 2 3 4 5  enum Color { red = 5, // =\u003e 5  green, // =\u003e 6  blue // =\u003e 7 }   1 2 3 4 5  enum Color { red = 'red', // Color.red =\u003e 'red'  green = 'green', // Color.green =\u003e 'green'  blue = 1 // Color.blue =\u003e 1 }   any\r\r\n 任意类型,any 类型的变量其类型可变\n 1 2 3 4  let randomValue: any = 6 randomValue = true randomValue = 'hello' randomValue = {}   unknow\r\r\n定义为 unknow 类型的变量在一定时候需要做逻辑判断，相比较 any 来说更安全\nvoid、undefined 与 never\r\r\n void：不存在 undefined：存在但未定义  1 2 3 4 5 6 7 8  // 函数throwError永远不会执行完（抛出了异常），其类型为never function throwError(message: string, errorCode: number): never { throw { message, errorCode } } throwError('not found', 404)   类型适配(类型断言) 1 2 3 4  let message: any message = 'abc' // 无法调用endWith()函数，其类型任为any message.endWith('c')   1 2 3 4 5  let message: any ;(\u003cstring\u003emessage)( // 将message类型转为string  message as string ) // 效果同上   面向对象 对象 Object\r\r\n1 2 3 4 5 6  const person = { name: 'zhang', age: 18 } // 正常调用，输出18 console.log(person.age)   1 2 3 4 5 6 7  const person ：{ name:string, age:number }= { name:'zhang', age:18 }   interface 与 class\r\r\n1 2 3 4 5 6 7 8 9 10  let drawPoint = (point:Point) =\u003e{ console.log({point.x,point.y}) } drawPoint({x:100,y:50}) // 输出100,50 drawPoint({x:\"100\",y:\"50\"}) // 非法  interface Point{ x:number; y:number; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  interface IPoint { x: number y: number drawPoint: () =\u003e void getDistances: (p: IPoint) =\u003e number } class Point implements IPoint { x: number y: number constructor(x: number, y: number) { this.x = x this.y = y } drawPoint = () =\u003e { console.log('x:', this.x, 'y:', this.y) } getDistances = (p: IPoint) =\u003e { return Math.pow(p.x - this.x, 2) + Math.pow(p.y - this.y, 2) } } const point = Point(2, 3)   ","description":"","title":"TypeScript入门介绍","uri":"/posts/%E5%89%8D%E7%AB%AF/typescript%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"},{"categories":["posts"],"content":"内容来自公众号 @前端新世界\n你可能已经用 JavaScript 开发很长一段时间了，但是，有时候你可能并没有使用过它提供的最新最漂亮的功能。这些新功能或许可以帮助你解决一些问题，而不用额外增加很多代码。换句话说，这些技术可以帮助你编写简洁优雅的 JavaScript 代码。本文就总结了 17 个写出优雅 JavaScript 代码的小技巧，一起来看看吧。\n多条件 IF 语句 我们可以将多个条件值存储在一个数组中，并且使用数组的includes方法来进行条件判断。\n1 2 3 4 5 6 7 8  // 普通写法 if (x === 'abc' || x === 'def' || x === 'ghi' || x === 'jkl') { // logic } // 优雅写法 if (['abc', 'def', 'ghi', 'jkl'].includes(x)) { // logic }   If … else 条件简写 当if-else语句中不包含复杂逻辑时，下面这种写法将是一个不错的捷径。我们可以简单地使用三元运算符来实现。\n1 2 3 4 5 6 7 8 9 10 11 12  // 普通写法 let test: boolean if (x \u003e 100) { test = true } else { test = false } // 优雅写法 let test = x \u003e 10 ? true : false // or we can simply use let test = x \u003e 10 console.log(test)   如果是嵌套条件语句，我们还可以这样写：\n1 2 3  let x = 300, let test2 = (x \u003e 100) ? 'greater 100' : (x \u003c 50) ? 'less 50' : 'between 50 and 100'; console.log(test2); // \"greater than 100\"   空值、未定义和空字符的检查 当我们创建一个新的变量，有时候会在引用它时检查该变量是否为null或者undefined。JavaScript 确实提供了实现这个功能的简便方法。\n1 2 3 4 5 6  // 普通写法 if (first !== null || first !== undefined || first !== '') { let second = first } // 优雅写法 let second = first || ''   Null 检查，以及赋默认值 1 2 3  let first = null, let second = first || ''; console.log(\"null check\", test2); // output will be \"\"   Undefined 检查，以及赋默认值 1 2 3  let first= undefined, let second = first || ''; console.log(\"undefined check\", test2); // output will be \"\"   foreach 循环的简写 这是 JavaScript 迭代循环的简写方式。\n1 2 3 4  // 普通写法 for (var i = 0; i \u003c testData.length; i++) // 优雅写法 for (let i in testData) or for (let i of testData)   比较后返回值 在 return 语句中使用比较函数，可以将 5 行代码压缩至 1 行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // 普通写法 let test function checkReturn() { if (!(test === undefined)) { return test } else { return callMe('test') } } var data = checkReturn() console.log(data) //output test function callMe(val) { console.log(val) } // 优雅写法 function checkReturn() { return test || callMe('test') }   函数调用的简单写法 我们可以使用三元运算符实现这些类型的功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // 普通写法 function test1() { console.log('test1') } function test2() { console.log('test2') } var test3 = 1 if (test3 == 1) { test1() } else { test2() } // 优雅写法 ;(test3 === 1 ? test1 : test2)()   Switch 语句的简单写法 我们可以将条件存储在key-value的字典对象中，然后通过字典对象的索引来判断取值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // Longhand switch (data) { case 1: test1() break case 2: test2() break case 3: test() break // And so on... } // Shorthand var data = { 1: test1, 2: test2, 3: test } data[anything] \u0026\u0026 data[anything]()   多行字符串的简写 当我们在代码中处理多行字符串时，我们可以这样做：\n1 2 3 4 5  //普通写法 const data = 'abc abc abc abc abc abc\\n\\t' + 'test test,test test test test\\n\\t' //优雅写法 const data = `abc abc abc abc abc abc test test,test test test test`   隐式返回的简写 我们可以使用箭头函数直接返回值，而不用写return语句。\n1 2 3 4 5 6 7 8 9  Longhand: //longhand function getArea(diameter) { return Math.PI * diameter } //shorthand getArea = diameter =\u003e ( Math.PI * diameter; )   条件查找的简写 如果我们的代码中需要检查变量的类型，然后基于不同类型调用不同的方法，那么我们除了使用if-else语句或者switch语句来判断外，还可以使用更简单的方法吗？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  // 普通写法 if (type === 'test1') { test1() } else if (type === 'test2') { test2() } else if (type === 'test3') { test3() } else if (type === 'test4') { test4() } else { throw new Error('Invalid value ' + type) } // 优雅写法 var types = { test1: test1, test2: test2, test3: test3, test4: test4 } var func = types[type] !func \u0026\u0026 throw new Error('Invalid value ' + type) func()   Object.entries() 这个特性可以将一个对象转换成一个对象数组。\n1 2 3 4 5 6 7 8 9  const data = { test1: 'abc', test2: 'cde', test3: 'efg' } const arr = Object.entries(data) console.log(arr) /** Output: [ [ 'test1', 'abc' ], [ 'test2', 'cde' ], [ 'test3', 'efg' ] ] **/   Object.values() 这也是 ES8 的一个新特性，它和Object.entries()的功能类似，但是返回结果中没有 key 值。\n1 2 3 4 5 6  const data = { test1: 'abc', test2: 'cde' } const arr = Object.values(data) console.log(arr) /** Output: [ 'abc', 'cde'] **/   多次重复字符串 为了重复操作同一个字符串，我们可以在同一个for循环中将它们连接起来，那么有没有更好的方法呢？\n1 2 3 4 5 6 7 8  // 普通写法 let test = '' for (let i = 0; i \u003c 5; i++) { test += 'test ' } console.log(str) // test test test test test // 优雅写法 'test '.repeat(5)   Math.pow()简写 1 2 3 4  // 普通写法 Math.pow(2, 3) // 8 // 优雅写法 2 ** 3 // 8   数字分隔符 现在，我们只需使用_即可轻松分隔数字，这可以帮助开发者更容易处理较大的数字。\n1 2 3 4  //老语法 let number = 98234567 //新语法 let number = 98_234_567   ","description":"","title":"优雅的JavaScript代码小技巧","uri":"/posts/%E5%89%8D%E7%AB%AF/%E4%BC%98%E9%9B%85%E7%9A%84javascript%E4%BB%A3%E7%A0%81%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"categories":["posts"],"content":"Git配置  在初始化新的git仓库或开始提交之前，应先配置git身份。\n 为了更改与提交相关联的name，你可以使用git config命令：\n1  git config --global user.name \"Your Name\"   同样，这也适用于更改与提交关联的电子邮件地址：\n1  git config --global user.email \"yourmail@example.com\"   这样，在配置了以上内容之后，在你进行提交时以及查看git日志后，你将能够看到此提交与上面的配置信息相关联。\n1  git log   初始化项目 要初始化新的本地git项目，请打开git或bash终端，通过cd命令转到你想要存储项目的目录，然后运行：\n1  git init .   如果你已经在GitHub中有一个现有项目，则可以使用git clone命令对其进行克隆：\n1  git clone your_project_url   创建一个新分支 要创建一个新分支，你需要做的就是使用git branch命令：\n1  git branch branch_name   如果不用上面的方法，我更喜欢使用以下命令，因为这会创建一个新分支，并将你切换到新创建的分支：\n1  git checkout -b branch_name   如果branch_name已经存在，你将收到一条警告，表明该分支名称已存在，并且你将不会被签出到此分支。\n列出分支 为了列出所有可用的本地分支，只需运行以下命令：\n1  git branch -a   你将获得本地和远程分支的列表，其输出如下所示：\n1 2 3 4 5 6 7  bugfix/nginx-www-server-name develop * main remotes/origin/HEAD -\u003e origin/master remotes/origin/bugfix/nginx-www-server-name remotes/origin/develop remotes/origin/main   remotes关键字表示这些分支是远程分支。\n切换到新分支 1  git checkout branch_name   如上所述，如果此分支不存在，添加-b标志将创建分支。\n从远程获取更新并将当前分支与上游（upstream）合并 如果你和团队中的其他开发人员一起工作于同一项目，则经常需要获取这些同事所做的更改，以便于本地存储到你的PC上。\n为此，你需要做的就是使用git pull命令：\n1  git pull origin branch_name   请注意，这也会把新更改合并到你签入到的当前分支中。\n当前状态 为了检查本地git仓库的当前状态，你需要使用以下命令：\n1  git status   这可能是最常用的命令之一，因为你需要经常检查本地代码仓库的状态，以便能知道更改、暂存或删除了哪些文件。\n将文件添加到暂存区 假设你有一个静态的HTML项目，并且已经初始化了git仓库。\n现在，你决定添加一个叫做about-me.html的新HTML文件，当然你已经添加好了一些HTML代码。为了添加新文件，以便也可在git中对其进行跟踪，你首先需要使用git add命令：\n1  git add file_name   这将暂存新文件，实际上意味着下次你进行提交时，所做的更改将成为提交的一部分。\n为了确认这一点，你可以再次运行git status命令\n你将看到以下输出：\n1 2 3 4 5 6 7  On branch main Your branch is up to date with 'origin/main'. Changes to be committed: (use \"git reset HEAD \u003cfile\u003e...\" to unstage) new file: about-me.html   删除文件 为了从git项目中删除文件，可以使用以下命令：\n1  git rm some_file.txt   然后，如果再次运行git status，将会看到some_file.txt文件已被删除：\n1 2 3 4 5 6 7  On branch main Your branch is up to date with 'origin/main'. Changes to be committed: (use \"git reset HEAD \u003cfile\u003e...\" to unstage) deleted: some_file.txt   放弃文件更改 万一你犯了一个错误，并且想要放弃对特定文件的更改，并将该文件的内容重置为最近一次提交时的内容，则需要使用以下命令：\n1  git checkout -- file_name   这是一个非常方便的命令，可以快速将文件恢复为初始内容。\n提交到本地 一旦你完成更改并使用git add命令添加到暂存区，你还需要提交更改。\n为此，你必须使用git commit命令：\n1  git commit   这将打开一个文本编辑器，你可以在此文本编辑器中输入提交说明。\n并且，你可以使用-m标志直接在命令中指定提交说明：\n1  git commit -m \"Nice commit message here\"   将本地更新推送到远程 最后，一旦完成所有更改，就可以使用git add命令将文件添加到暂存区（staged），然后使用git commit命令提交更改，并且你必须将这些更改推送到远程git仓库。\n为此，只需使用git push命令：\n1  git push origin branch_name   删除分支 1  git branch -d branch_name   ","description":"","title":"常用的18个GIT命令","uri":"/posts/%E5%89%8D%E7%AB%AF/%E5%B8%B8%E7%94%A8%E7%9A%8418%E4%B8%AAgit%E5%91%BD%E4%BB%A4/"},{"categories":["posts"],"content":"创建本地开发分支\r\r 进入 public 目录，新建一个本地开发分支 feature/vx.0.0，并切换至该分支\n1 2 3 4 5 6  cd public git branch feature/v1.0.0 git checkout feature/v1.0.0 # or cd public git checkout -b feature/v1.0.0    开发分支常用 feature 命名，后面接开发版本号\n 创建远程同名分支\r\r 1 2 3 4  git push origin feature/v2.0.0:feature/v2.0.0 # 查看当前所有分支 git branch -a    也可以在远程仓库手动创建\n 关联本地与远程分支\r\r 1 2 3 4  git branch --set-upstream-to=origin/feature/v1.0.0 feature/v1.0.0 # 查看分支详情 git branch -vv   提交代码\r\r 进入博客站点目录(blog)打包项目\n1 2  cd .. hugo -t meme   提交代码\n注：在推送代码之前使用 git pull  指令以确保本地代码与远程代码无冲突！ 1 2 3 4 5 6  cd public # 多人协同开发时避免冲突 git pull git add . git commit -m 'update：更新信息' git push   ","description":"","title":"利用开发分支更新博客","uri":"/posts/%E5%8D%9A%E5%AE%A2/%E5%88%A9%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%86%E6%94%AF%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/"},{"categories":["posts"],"content":"目录结构\r\r\n  父目录子目录 📁blog📁content 📁data 📁layouts 📁public 📁resources 📁static 📁themes 📃config.toml 📃deploy.sh    创建一篇博文\r\r\n 方式一：命令创建\n 进入blog目录下，执行命令：\n1  hugo new \"posts/博文名称.md\"    方式二：手动创建\n 在posts文件夹下手动创建博文名称.md文件\n编辑博文\r\r\n博文头信息\r\r\n1 2 3 4 5 6 7 8 9 10  --- title: \"如何编辑一篇博文\" date: 2021-03-09T16:58:30+08:00 draft: false tags: [标签1, 标签2] categories: [分类, 子类] toc: true dropCap: false badge: false ---   \r部分属性支持全局配置（config.toml）,优先级低于此处 注意冒号后有一个空格 标题\r\r\n1 2 3 4 5 6  # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题   列表\r\r\n  TYPE示例语法  无序列表  Item 1 Item 2  Item 2a Item 2b      1 2 3 4  - Item 1 - Item 2 - Item 2a - Item 2b      有序列表   Item 1 Item 2 Item 3  Item 3a Item 3b      1 2 3 4  1. Item 1 2. Item 2 1. Item 2a 2. Item 2b     任务列表   待办事项 1 完成事项 1    1 2  - [ ] 待办事项1 - [x] 完成事项1      排版\r\r\n   语法 示例    1  {{\u003c align left \"文字居左\" \u003e}}     文字居左\n    1  {{\u003c align center \"文字居中\" \u003e}}     文字居中\n    1  {{\u003c align right \"文字居右\" \u003e}}     文字居右\n    强调\r\r\n   语法 效果     *斜体*or_斜体_ 斜体   **粗体** or __粗体__ 粗体   ~~删除线~~ 删除线     另，Meme 主题新增独创语法\n   语法 效果     ..加点.. ..加点..     提示\r\r\n   语法效果    1  {{\u003c notice error \u003e}}错误{{\u003c /notice \u003e}}    \r错误    1  {{\u003c notice warning \u003e}}警告{{\u003c /notice \u003e}}    \r警告    1  {{\u003c notice tip \u003e}}提示{{\u003c /notice \u003e}}    \r提示    1  {{\u003c notice success \u003e}}成功{{\u003c /notice \u003e}}    \r成功    角标\r\r\n   TYPE 语法 效果     上标 30\u003csup\u003eth\u003c/sup\u003e 30th   下标 H\u003csub\u003e2\u003c/sub\u003eO H2O   脚注 内容 [^1][回车][^1]: 这是一个脚注 内容 1    引用\r\r\n   语法效果    1  \u003e 海上生明月，天涯共此时      海上生明月，天涯共此时\n     1 2 3  {{\u003c quote \u003e}} 海上生明月，天涯共此时 {{\u003c /quote \u003e}}    海上生明月，天涯共此时\n     1 2 3  {{\u003c quote-center \u003e}} 海上生明月\u003cbr/\u003e天涯共此时 {{\u003c /quote-center \u003e}}    海上生明月天涯共此时\n     表格\r\r\n1 2 3  | 表头 | 表头 | 表头 | | :--- | :--: | ---: | | 居左 | 居中 | 居右 |      表头 表头 表头     居左 居中 居右    复杂表格：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  \u003ctable\u003e \u003ctbody\u003e \u003ctr\u003e \u003cth colspan=\"3\"\u003e结果字段\u003c/th\u003e \u003cth\u003e字段含义\u003c/th\u003e \u003cth\u003e类型\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth colspan=\"3\"\u003eaddress\u003c/th\u003e \u003cth\u003e详细地址信息\u003c/th\u003e \u003cth rowspan=\"6\"\u003estring\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth rowspan=\"5\"\u003econtent\u003c/th\u003e \u003cth colspan=\"2\"\u003eaddress\u003c/th\u003e \u003cth\u003e简要地址信息\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth rowspan=\"2\"\u003eaddress_detail\u003c/th\u003e \u003cth\u003ecity\u003c/th\u003e \u003cth\u003e城市\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003ecity_code\u003c/th\u003e \u003cth\u003e百度城市代码\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth rowspan=\"2\"\u003epoint\u003c/th\u003e \u003cth\u003ex\u003c/th\u003e \u003cth\u003e当前城市中心点经度\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003cth\u003ey\u003c/th\u003e \u003cth\u003e当前城市中心点纬度\u003c/th\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e      结果字段 字段含义 类型   address 详细地址信息 string   content address 简要地址信息   address_detail city 城市   city_code 百度城市代码   point x 当前城市中心点经度   y 当前城市中心点纬度    链接\r\r\n  TYPE语法 效果  链接  1  [我的博客](https://ztygcs.github.io/)    我的博客\n   图片  1  ![](https://ztygcs.github.io/icons/android-chrome....png 'img')        多媒体\r\r\n单曲\n1 2 3  \u003caudio controls height=\"100\" style=\"display:block;margin:auto\"\u003e \u003csource src=\"https://xxx.mp3\" type=\"audio/mpeg\" /\u003e \u003c/audio\u003e    歌单\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u003c!--来源：https://aplayer.js.org/#/zh-Hans/--\u003e \u003cscript src=\"https://unpkg.com/meting@1.2/dist/Meting.min.js\"\u003e\u003c/script\u003e \u003c!-- require APlayer --\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\" /\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"\u003e\u003c/script\u003e \u003c!-- require MetingJS --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"\u003e\u003c/script\u003e \u003cdiv class=\"aplayer\" data-id=\"歌单id\" data-server=\"netease\" data-type=\"playlist\" data-fixed=\"false\" data-mini=\"false\" data-listfolded=\"true\" data-order=\"random\" data-theme=\"#07b39b2a\" \u003e\u003c/div\u003e    更改属性data-id，指定网易歌单 id\n      视频：\n1 2 3  \u003cvideo poster=\"https://xxx.png\" controls\u003e \u003csource src=\"https://xxx.mp4\" \u003e \u003c/video\u003e    更改属性poster，指定首页图 更改属性src，指定视频地址\n  卡片风格\r\r\n1  {{\u003ccard\u003e}}十年生死两茫茫，不思量，自难忘{{\u003c/card\u003e}}   十年生死两茫茫，不思量，自难忘\r\r\rGitHub风格\r\r\n1 2 3 4 5 6 7 8  {{\u003c github name=\"hugo-theme-meme\" link=\"https://github.com/reuixiy/hugo-theme-meme\" description=\"MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。同时，希望你将像欣赏一个模因一样欣赏 MemE，希望你将像分享一个模因一样分享 MemE，就像你的博客和文章所做的那样😝！\" color=\"#E34C26\" language=\"HTML\" \u003e}}   \rhugo-theme-meme\r\rMemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。同时，希望你将像欣赏一个模因一样欣赏 MemE，希望你将像分享一个模因一样分享 MemE，就像你的博客和文章所做的那样 😝！ \rHTML\r\r\r发布博文\r\r\n方式一：命令行\n打开 cmd 窗口在 blog 目录下依次执行以下命令：\n1 2 3 4 5 6 7 8  hugo -t meme # Go To Public folder cd public # Add changes to git. git add -A # Commit changes. git commit -m \"msg\" git push origin master   方式二：deploy.sh 文件部署\n在blog文件夹下新建 deploy.sh 文件并编辑以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash echo -e \"\\033[0;32mDeploying updates to GitHub...\\033[0m\" # Build the project. # if using a theme, replace by `hugo -t \u003cyourtheme\u003e` hugo -t meme # Go To Public folder cd public # Add changes to git. git add -A # Commit changes. # 使用`date`加入时间 # msg=\"rebuilding site `date`\" msg=\"release：发表文章《...》\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master # Come Back cd ..   然后在命令窗口中进入blog目录下执行以下命令：\n1  ./deploy.sh    关于 commit message的说明\n    字段 说明     feature(新) 开发新的功能   fix(修复) 修复 bug   release(发布) 发表文章   update(更新) 更新文章   delete(删除) 删除某项内容   modify(修改) 修改文章的内容   css(样式) 只涉及到样式的修改   docs(文档) 说明文档   restructure(重构) 重构说明      这是一个脚注 ↩︎\n   ","description":"","title":"如何发布一篇博文","uri":"/posts/%E5%8D%9A%E5%AE%A2/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"},{"categories":["posts"],"content":"本篇博文主要记录本 Hugo 博客从 0 到 1 的简要步骤，但其适用于其他大多数 hugo 博客的搭建流程，仅仅区别于主题的不同。\n具体流程 准备Hugo文件\r\r\n下载 hugo 文件（extended 扩展版）并解压到自定义文件夹（例：我存放的目录为D:\\Hugo\\bin）\n配置环境变量\r\r\n在 我的电脑 --\u003e 属性 --\u003e 高级系统设置 --\u003e 环境变量 --\u003e 系统变量 --\u003e Path 中增加一条D:\\Hugo\\bin，即解压后的 hugo.exe 文件存放的目录。\nD:\\Hugo\\bin\r\r修改为自己对应文件位置路径 检查版本\r\r\n打开 cmd 终端执行以下命令查看是否安装成功（是否输出 Hugo 版本信息）\n1  hugo version   生成博客\r\r\n打开命令窗口，进入D:\\Hugo\\Sites文件夹（生成站点的文件夹，自定义），输入命令\n1  hugo new site myblog   \r命令执行完成之后在D:\\Hugo\\Sites\\myblog文件夹下会自动生成博客需要的文件 安装主题\r\r\n hugo 主题网站\n 本篇博客使用的 meme 主题，作者：reuixiy\n\rhugo-theme-meme\r\rMemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。MemE 主题专注于优雅、简约、现代，以及代码的正确性。同时，希望你将像欣赏一个模因一样欣赏 MemE，希望你将像分享一个模因一样分享 MemE，就像你的博客和文章所做的那样😝！ \rHTML\r\r\r执行以下命令完成 meme 主题的安装。\n1 2 3  cd myblog git init git submodule add --depth 1 https://github.com/reuixiy/hugo-theme-meme.git themes/meme   开始写作\r\r\n将 config.toml 替换为示例配置。\n1  rm config.toml \u0026\u0026 cp themes/meme/config-examples/zh-cn/config.toml config.toml   新建一篇文章和一个关于页面：\n1  hugo new \"posts/hello-world.md\"   1  hugo new \"about/_index.md\"   本地预览\r\r\n1  hugo server -t meme --buildDrafts   1  hugo server -D   准备个人 GitHub 账号\r\r\n创建个人 GitHub 账号与仓库（命名：账号名.github.io）\n部署到 GitHub\r\r\n1  hugo --theme=meme --baseUrl=\"https://ztygcs.github.io/\" --buildDrafts   \r在当前myblog文件夹下会生成 public 文件夹 接着将 public 文件夹上传至 GitHub 仓库\n1 2 3 4 5 6  cd public git init git add . git commit -m 'model：博客第一次提交' git remote add origin https://github.com/ztygcs/ztygcs.github.io.git git push -u origin master   在线访问网站\r\r\n访问网址：ztygcs.github.io\n","description":"","title":"从0到1打造Hugo博客","uri":"/posts/%E5%8D%9A%E5%AE%A2/%E4%BB%8E0%E5%88%B01%E6%89%93%E9%80%A0hugo%E5%8D%9A%E5%AE%A2/"},{"categories":["posts"],"content":"1. 百度地图API SDK之Web服务API 1.1 服务介绍 1.1.1 普通IP定位 普通IP定位1是一套以HTTP/HTTPS形式提供的轻量级定位接口，用户可以通过该服务，根据IP定位来获取大致位置。 目前该服务同时支持 IPv4 和 IPv6 来获取位置信息。\n1.1.2 功能介绍 利用IP获取大致位置，调用API接口，返回请求参数中指定上网IP的大致位置信息（一般为城市级别），位置信息包括：经纬度、省、市等地址信息。 普通IP定位服务目前不支持海外场景。\n如果请求参数中未指定上网IP，则默认返回当前服务请求来源的IP所对应的大致位置信息。 该服务所返回的经纬度信息只是一个大概的位置，一般为城市中心点。\n1.1.3 适用场景 适用于对定位精度要求不高的IP请求定位的应用。\n如果您的应用为Android Native App，建议使用Android定位SDK，定位效果最佳，精度可达到10m，且无任何使用配额及并发量的限制。\n1.2 服务文档 1.2.1 请求URL   HTTP协议：http://api.map.baidu.com/location/ip?ak=您的AK\u0026ip=您的IP\u0026coor=bd09ll\n  HTTPS协议：https://api.map.baidu.com/location/ip?ak=您的AK\u0026ip=您的IP\u0026coor=bd09ll\n  1.2.2 请求参数    参数名称 参数含义 类型 备注     ip 用户上网的IP地址，请求中如果不出现或为空，会针对发来请求的IP进行定位。如您需要通过IPv6来获取位置信息，请提交工单申请。 string 可选   ak 开发者密钥，可在API控制台申请获得 string 必填   sn 若用户所用AK的校验方式为SN校验时该参数必填（什么是SN校验？）。其他AK校验方式的可不填写 string 可选   coor 设置返回位置信息中，经纬度的坐标类型，分别如下：\ncoor不出现、或为空：百度墨卡托坐标，即百度米制坐标\ncoor = bd09ll：百度经纬度坐标，在国测局坐标基础上二次加密而来\ncoor = gcj02：国测局02坐标，在原始GPS坐标基础上，按照国家测绘行业统一要求，加密后的坐标\n百度地图的坐标类型为bd09ll，如果结合百度地图使用，请注意坐标选择 string 可选    1.2.3 返回结果（JSON格式）  结果字段字段含义类型 address详细地址信息string contentaddress简要地址信息 address_detailcity城市 city_code百度城市代码 province省份 pointx当前城市中心点经度 y当前城市中心点纬度 status结果状态返回码，请参考后面的介绍   1.2.4 返回结果示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { address: \"CN|北京|北京|None|CHINANET|1|None\", #详细地址信息 content: #结构信息 { address: \"北京市\", #简要地址信息 address_detail: #结构化地址信息 { city: \"北京市\", #城市 city_code: 131, #百度城市代码 province: \"北京市\", #省份 }, point: #当前城市中心点 { x: \"116.39564504\", #当前城市中心点经度 y: \"39.92998578\" #当前城市中心点纬度 } }, status: 0 #结果状态返回码 }   1.2.5 接口错误码    状态码 定义 注释     0 正常    1 服务器内部错误 该服务响应超时或系统内部错误   10 上传内容超过8M Post上传数据不能超过8M   101 AK参数不存在 请求消息没有携带AK参数   102 Mcode参数不存在，mobile类型mcode参数必需 对于Mobile类型的应用请求需要携带mcode参数，该错误码代表服务器没有解析到mcode   200 APP不存在，AK有误请检查再重试 根据请求的AK，找不到对应的APP   201 APP被用户自己禁用，请在控制台解禁    202 APP被管理员删除 恶意APP被管理员删除   203 APP类型错误 当前API控制台支持Server(类型1), Mobile(类型2, 新版控制台区分为Mobile_Android(类型21)及Mobile_IPhone（类型22）及Browser（类型3），除此之外的其他类型被认为是APP类型错误   210 APP IP校验失败 在申请Server类型应用的时候选择IP校验，需要填写IP白名单，如果当前请求的IP地址不在IP白名单或者不是0.0.0.0/0就认为IP校验失败   211 APP SN校验失败 SERVER类型APP有两种校验方式：IP校验和SN校验，当用户请求的SN和服务端计算出来的SN不相等的时候，提示SN校验失败   220 APP Referer校验失败 浏览器类型的APP会校验referer字段是否存在，且在referer白名单里面，否则返回该错误码   230 APP Mcode码校验失败 服务器能解析到mcode，但和数据库中不一致，请携带正确的mcode   240 APP 服务被禁用 用户在API控制台中创建或设置某APP的时候禁用了某项服务   250 用户不存在 根据请求的user_id, 数据库中找不到该用户的信息，请携带正确的user_id   251 用户被自己删除 该用户处于未激活状态   252 用户被管理员删除 恶意用户被加入黑名单   260 服务不存在 服务器解析不到用户请求的服务名称   261 服务被禁用 该服务已下线   301 永久配额超限，限制访问 配额超限   302 天配额超限，限制访问 配额超限   401 当前并发量已经超过约定并发配额，限制访问 并发控制超限，请控制并发量   402 当前并发量已经超过约定并发配额，并且服务总并发量也已经超过设定的总并发配额，限制访问 并发控制超限，请控制并发量   1001 没有IPv6地址访问的权限 如需通过IPv6来获取位置信息，请提交工单申请    2. 移动端实现 2.1 通过ip获取经纬度 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  private Thread located_dataget = new Thread() { @Override public void run() { link = \"https://api.map.baidu.com/location/ip?ak=自己的ak\u0026ip=\"+dev_ip+\"\u0026coor=bd09ll\"; located_result = GData.requestGet(link); handler_located.postDelayed(located_datashow,1000); } }; private Runnable located_datashow = new Runnable() { @Override public void run() { if(located_result!=null){ //解析返回的json数据  } } }; private Runnable start = new Runnable() { @Override public void run() { located_dataget.start(); } };   2.1.1 浏览器直接访问返回结果示例 2.1.2 json解析获取经纬度 1 2 3 4 5 6 7 8 9 10 11  try{ JSONObject jsonObject1 = new JSONObject(located_result); String data1 = jsonObject1.getString(\"content\"); JSONObject jsonObject2 = new JSONObject(data1); String data2 = jsonObject2.getString(\"point\"); JSONObject jsonObject3 = new JSONObject(data2); latitude = jsonObject3.getString(\"y\"); longitude = jsonObject3.getString(\"x\"); }catch (Exception e){ e.printStackTrace(); }   2.2 通过经纬度返回详细位置 参考百度地图开发之全球逆地理编码2\n http://api.map.baidu.com/reverse_geocoding/v3/?ak=your's ak\u0026output=json\u0026coordtype=wgs84ll\u0026location=31.225696563611,121.49884033194  2.3 将详细位置在百度地图中显示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116  public class Device_location_ip extends AppCompatActivity { private boolean isFirstLocate=true; private MapView mapView; private BaiduMap baiduMap; String link,result; private Handler handler = new Handler(); private String latitude,longitude; @Override protected void onCreate(Bundle savedInstanceState){ super.onCreate(savedInstanceState); //隐藏手机顶部状态栏  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); SDKInitializer.initialize(getApplicationContext()); setContentView(R.layout.device_location_ip); Intent intent = getIntent(); latitude = intent.getStringExtra(\"latitude\"); longitude = intent.getStringExtra(\"longitude\"); //获取控件MapView,先显示百度地图  mapView = (MapView) findViewById(R.id.mapview); baiduMap = mapView.getMap(); //允许在地图上显示我的位置  baiduMap.setMyLocationEnabled(true); navigateTo(Double.parseDouble(latitude),Double.parseDouble(longitude)); handler.post(start);、 } //对传入的经纬度参数进行处理，并在地图上显示出来  private void navigateTo(double laititude,double longitude) { if (isFirstLocate) { //Toast.makeText(this, \"nav to \" + location.getAddrStr(), Toast.LENGTH_SHORT).show();  LatLng ll = new LatLng(laititude, longitude); MapStatusUpdate update = MapStatusUpdateFactory.newLatLng(ll); baiduMap.animateMapStatus(update); update = MapStatusUpdateFactory.zoomTo(16f); baiduMap.animateMapStatus(update); isFirstLocate = false; } //在地图上显示我的位置  MyLocationData.Builder locationBuilder = new MyLocationData.Builder(); locationBuilder.latitude(laititude); locationBuilder.longitude(longitude); MyLocationData locationData = locationBuilder.build(); baiduMap.setMyLocationData(locationData); } @Override protected void onResume() { super.onResume(); mapView.onResume(); } @Override protected void onPause() { super.onPause(); mapView.onPause(); } @Override protected void onDestroy() { super.onDestroy(); mapView.onDestroy(); baiduMap.setMyLocationEnabled(false); } private Thread dataget = new Thread() { @Override public void run() { link = \"http://api.map.baidu.com/reverse_geocoding/v3/?ak=your's ak\u0026output=json\u0026coordtype=wgs84ll\u0026location=latitude,longitude\"; result = GData.requestGet(link); handler.postDelayed(datashow,1000); } }; private Runnable datashow = new Runnable() { @Override public void run() { if(result!=null){ Log.d(\"link\",link); Log.d(\"result:\", result); try{ JSONObject jsonObject1 = new JSONObject(result); String data1 = jsonObject1.getString(\"result\"); JSONObject jsonObject2 = new JSONObject(data1); }catch (Exception e){ e.printStackTrace(); } } } }; private Runnable start = new Runnable() { @Override public void run() { dataget.start(); } }; }     百度地图开放平台-普通IP定位 ↩︎\n 百度地图开放平台-全球逆地理编码 ↩︎\n   ","description":"","title":"IP定位的实现","uri":"/posts/%E5%85%B6%E4%BB%96/ip%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"categories":["posts"],"content":"公式 行中公式：$y=x+1$\n$y=x+1$ 独立公式：$$y=x+1$$\n$$y=x+1$$  独立公式会另起一行居中显示\n 角标    符号 说明     ^ 上角标   _ 下角标      使用{}将内容括成一个整体 上下角标..可以嵌套..   $$ x^{y^z}=(1+e_1)^{xy^w} $$ $$ x^{y^z}=(1+e_1)^{xy^w} $$ 另外，如果要在左右两边都有上下标，可以用 \\sideset 命令。\n例：\n$$ \\sideset{^1_2}{^3_4}x $$ $$ \\sideset{^1_2}{^3_4}x $$\n括号    命令 说明 预览     ( 圆括号（左） $($   ) 圆括号（右） $)$   [ 方括号（左） $[$   ] 方括号（右） $]$   \\\\{ 花括号（左） $\\{$   \\\\} 花括号（右） $\\}$    (、)、[、] 和 | 表示符号本身，使用 \\\\{来表示 {，\\\\} 来表示 }\n通过将 \\left与( ,\\right与) 结合使用，可以将括号大小随着其内容变化。其他括号同理。\n$$ {f}'(x) = ( \\frac{df}{dx} ) $$ $$ {f}'(x) = ( \\frac{df}{dx} ) $$\n$$ {f}'(x) = \\left( \\frac{df}{dx} \\right) $$ $$ {f}'(x) = \\left( \\frac{df}{dx} \\right) $$\n$$ {f}'(0) = \\left. \\frac{df}{dx} \\right|_{x=0} $$ $$ {f}'(0) = \\left. \\frac{df}{dx} \\right|_{x=0} $$\n运算表达式    命令 说明 预览     \\frac{a}{b} 分数 $\\frac{a}{b}$   \\sqrt[a]{b} 开方（a为2时可省略） $\\sqrt[a]{b}$   \\sum_{a}^{b} 求和 $\\sum_{a}^{b}$   \\prod_{a}^{b} 连乘 $\\prod_{a}^{b}$   {a+}\\ldots{+b} 省略号（与文本底线对齐） ${a+}\\ldots{+b}$   {a+}\\cdots{+b} 省略号（与文本中线对齐） ${a+}\\cdots{+b}$   \\vec{a} 矢量 $\\vec{a}$   lim_{{a} \\to {\\infty}} 极限 $lim_{{a} \\to {\\infty}}$   {f}'(x) 导数 ${f}'(x)$   \\int_{a}^{b}{x}\\,dx 积分 $\\int_{a}^{b}{x},dx$   \\int 积分号 $\\int$   \\iint 二重积分号 $\\iint$   \\iiint 三重积分号 $\\iiint$    矩阵 圆括号型\n$$ \\begin{pmatrix} 1 \u0026 2 \u0026 3\\\\\\\\ 4 \u0026 5 \u0026 6 \\end{pmatrix} $$ $$ \\begin{pmatrix} 1 \u0026 2 \u0026 3\\\\\n4 \u0026 5 \u0026 6 \\end{pmatrix} $$\n$$ \\left( \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\\\\\ 4 \u0026 5 \u0026 6 \\\\\\\\ 7 \u0026 8 \u0026 9 \\\\\\\\ \\end{matrix} \\right) $$ $$ \\left( \\begin{matrix} 1 \u0026 2 \u0026 3 \\\\\n4 \u0026 5 \u0026 6 \\\\\n7 \u0026 8 \u0026 9 \\\\\n\\end{matrix} \\right) $$\n方括号型\n$$ \\begin{bmatrix} 1 \u0026 2 \u0026 3\\\\\\\\ 4 \u0026 5 \u0026 6 \\end{bmatrix} $$ $$ \\begin{bmatrix} 1 \u0026 2 \u0026 3\\\\\n4 \u0026 5 \u0026 6 \\end{bmatrix} $$\n$$ \\left[ \\begin{matrix} 1 \u0026 2 \u0026 3\\\\\\\\ 4 \u0026 5 \u0026 6 \\end{matrix} \\right] $$ $$ \\left[ \\begin{matrix} 1 \u0026 2 \u0026 3\\\\\n4 \u0026 5 \u0026 6 \\end{matrix} \\right] $$\n花括号型\n$$ \\begin{Bmatrix} 1 \u0026 2 \u0026 3\\\\\\\\ 4 \u0026 5 \u0026 6 \\end{Bmatrix} $$ $$ \\begin{Bmatrix} 1 \u0026 2 \u0026 3\\\\\n4 \u0026 5 \u0026 6 \\end{Bmatrix} $$\n$$ \\left\\\\{ \\begin{matrix} 1 \u0026 2 \u0026 3\\\\\\\\ 4 \u0026 5 \u0026 6 \\end{matrix} \\right\\\\} $$ $$ \\left\\{ \\begin{matrix} 1 \u0026 2 \u0026 3\\\\\n4 \u0026 5 \u0026 6 \\end{matrix} \\right\\} $$\n行列式 \\begin{vmatrix} x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\\\\\\\ x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ \\end{vmatrix} $$X= \\begin{vmatrix} x \u0026 x \u0026 \\cdots \u0026 x\\\\\nx \u0026 x \u0026 \\cdots \u0026 x\\\\\n\\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\\\\nx \u0026 x \u0026 \\cdots \u0026 x\\\\\n\\end{vmatrix} $$\n$$X= \\left| \\begin{matrix} x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\\\\\\\ x \u0026 x \u0026 \\cdots \u0026 x\\\\\\\\ \\end{matrix} \\right| $$ $$X= \\left| \\begin{matrix} x \u0026 x \u0026 \\cdots \u0026 x\\\\\nx \u0026 x \u0026 \\cdots \u0026 x\\\\\n\\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots\\\\\nx \u0026 x \u0026 \\cdots \u0026 x\\\\\n\\end{matrix} \\right| $$\n分段函数 $$f(n) = \\begin{cases} 2n, \u0026 \\text{if $n$ is even} \\\\\\\\ 3n, \u0026 \\text{if $n$ is odd} \\end{cases} $$ $$f(n) = \\begin{cases} 2n, \u0026 \\text{if $n$ is even} \\\\\n3n, \u0026 \\text{if $n$ is odd} \\end{cases} $$\n方程组 $$ \\left\\\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\\\\\ a_2x+b_2y+c_2z=d_2 \\\\\\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. $$ $$ \\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\\na_3x+b_3y+c_3z=d_3 \\end{array} \\right. $$\n数学常用符号 希腊字母\n 小写\n    符号 指令 符号 指令 符号 指令     $\\alpha$ \\alpha $\\theta$ \\theta $o$ o   $\\beta$ \\beta $\\vartheta$ \\vartheta $\\pi$ \\pi   $\\gamma$ \\gamma $\\iota$ \\iota $\\varpi$ \\varpi   $\\delta$ \\delta $\\kappa$ \\kappa $\\rho$ \\rho   $\\epsilon$ \\epsilon $\\lambda$ \\lambda $\\varrho$ \\varrho   $\\varepsilon$ \\varepsilon $\\mu$ \\mu $\\sigma$ \\sigma   $\\zeta$ \\zeta $\\nu$ \\nu $\\varsigma$ \\varsigma   $\\eta$ \\eta $\\xi$ \\xi $\\tau$ \\tau   $\\upsilon$ \\upsilon $\\phi$ \\phi $\\varphi$ \\varphi   $\\chi$ \\chi $\\psi$ \\psi $\\omega$ \\omega     大写\n    符号 指令 符号 指令 符号 指令     $\\Gamma$ \\Gamma $\\Lambda$ \\Lambda $\\Sigma$ \\Sigma   $\\Delta$ \\Delta $\\Xi$ \\Xi $\\Upsilon$ \\Upsilon   $\\Theta$ \\Theta $\\Pi$ \\Pi $\\Phi$ \\Phi   $\\Psi$ \\Psi $\\Omega$ \\Omega      运算符\n 二元运算符\n    符号 指令 符号 指令 符号 指令     $+$ + $\\pm$ \\pm $\\ast$ \\ast   $\\star$ \\star $-$ - $\\mp$ \\mp   $\\times$ \\times $\\triangleleft$ \\triangleleft $\\cup$ \\cup   $\\sqcup$ \\sqcup $\\div$ \\div $\\triangleright$ \\triangleright   $\\cdot$ \\cdot $\\circ$ \\circ $\\cap$ \\cap   $\\sqcap$ \\sqcap $\\setminus$ \\setminus $\\bullet$ \\bullet   $\\oplus$ \\oplus $\\diamond$ \\diamond $\\vee$ \\vee   $\\wedge $ \\wedge $\\ominus$ \\ominus $\\otimes$ \\otimes   $\\oslash$ \\oslash $\\odot$ \\odot $\\uplus$ \\uplus   $\\amalg$ \\\\amalg $\\bigtriangleup$ \\bigtriangleup $\\dagger$ \\dagger   $\\bigtriangledown$ \\bigtriangledown $\\ddagger$ \\ddagger $\\lhd$ \\lhd   $\\unlhd$ \\unlhd $\\rhd$ \\rhd $\\unrhd$ \\unrhd   $\\wr$ \\wr         大尺寸运算符\n    符号 指令 符号 指令 符号 指令     $\\sum$ \\sum $\\bigcup$ \\bigcup $\\bigcap$ \\bigcap   $\\bigvee$ \\bigvee $\\bigoplus$ \\bigoplus $\\prod$ \\prod   $\\bigwedge$ \\bigwedge $\\bigotimes$ \\bigotimes $\\coprod$ \\coprod   $\\bigsqcup$ \\bigsqcup $\\bigodot$ \\bigodot $\\biguplus$ \\biguplus     对数运算符\n    符号 指令 符号 指令 符号 指令     $\\log$ \\log $\\lg$ \\lg $\\ln$ \\ln     三角运算符\n    符号 指令 符号 指令 符号 指令     $30^\\circ$ 30^\\circ $\\bot$ \\bot $\\angle A$ \\angle A   $\\sin$ \\sin $\\cos$ \\cos $\\tan$ \\tan   $\\csc$ \\csc $\\sec$ \\sec $\\cot$ \\cot     微积分运算符\n    符号 指令 符号 指令 符号 指令     $\\int$ \\int $\\iint$ \\iint $\\iiint$ \\iiint   $\\iiiint$ \\iiiint $\\oint$ \\oint $\\prime$ \\prime   $\\lim$ \\lim $\\infty$ \\infty $\\nabla$ \\nabla     逻辑运算符\n    符号 指令 符号 指令 符号 指令     $\\because$ \\because $\\therefore$ \\therefore $\\not\\subset$ \\not\\subset   $\\forall$ \\forall $\\exists$ \\exists      关系符\n 二元关系符\n    符号 指令 符号 指令 符号 指令     $\u003e$ \u003e $\u003c$ \u003c $=$ =   $\\not\u003e$ \\not\u003e $\\not\u003c$ \\not\u003c $\\ne$ \\ne or \\not=   $\\le$ \\le $\\ge$ \\ge $\\equiv$ \\equiv   $\\ll$ \\ll $\\gg$ \\gg $\\doteq$ \\doteq   $\\prec$ \\prec $\\succ$ \\succ $\\sim$ \\sim   $\\preceq$ \\preceq $\\succeq$ \\succeq $\\simeq$ \\simeq   $\\subset$ \\subset $\\supset$ \\supset $\\approx$ \\approx   $\\subseteq$ \\subseteq $\\supseteq$ \\supseteq $\\cong$ \\cong   $\\sqsubset$ \\sqsubset $\\sqsupset$ \\sqsupset $\\Join$ \\Join   $\\sqsubseteq$ \\sqsubseteq $\\sqsupseteq$ \\sqsupseteq $\\bowtie$ \\bowtie   $\\in$ \\in $\\owns$ \\owns $\\propto$ \\propto   $\\vdash$ \\vdash $\\dashv$ \\dashv $\\models$ \\models   $\\mid$ \\mid $\\parallel$ \\parallel $\\perp$ \\perp   $\\smile$ \\smile $\\frown$ \\frown $\\asymp$ \\asymp   $\\notin$ \\notin $:$ :       戴帽符号\n    符号 指令 符号 指令     $\\hat{xy}$ \\hat{xy} $\\widehat{xyz}$ \\widehat{xyz}   $\\tilde{xy}$ \\tilde{xy} $\\widetilde{xyz}$ \\widetilde{xyz}   $\\check{x}$ \\check{x}  $\\breve{y}$ \\breve{y}   $\\grave{x}$ \\grave{x} $\\acute{y}$ \\acute{y}     连线符号\n    符号 指令     $\\fbox{a+b+c+d}$ \\fbox{a+b+c+d}   $\\overleftarrow{a+b+c+d}$ \\overleftarrow{a+b+c+d}   $\\overrightarrow{a+b+c+d}$ \\overrightarrow{a+b+c+d}   $\\overleftrightarrow{a+b+c+d}$ \\overleftrightarrow{a+b+c+d}   $\\underleftarrow{a+b+c+d}$ \\underleftarrow{a+b+c+d}   $\\underrightarrow{a+b+c+d}$ \\underrightarrow{a+b+c+d}   $\\underleftrightarrow{a+b+c+d}$ \\underleftrightarrow{a+b+c+d}   $\\overline{a+b+c+d}$ \\overline{a+b+c+d}   $\\underline{a+b+c+d}$ \\underline{a+b+c+d}   $\\overbrace{a+b+c+d}^{Sample}$ \\overbrace{a+b+c+d}^{Sample}   $\\underbrace{a+b+c+d}_{Sample}$ \\underbrace{a+b+c+d}_{Sample}   $\\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0}$ \\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0}   $\\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}}$ \\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}}     箭头\n    符号 指令 符号 指令     $\\uparrow$ \\uparrow $\\downarrow$ \\downarrow   $\\gets$ \\gets or \\leftarrow $\\longleftarrow$ \\longleftarrow   $\\to$ \\to or \\rightarrow $\\longrightarrow$ \\longrightarrow   $\\leftrightarrow$ \\leftrightarrow $\\longleftrightarrow$ \\longleftrightarrow   $\\updownarrow$ \\updownarrow $\\Leftarrow$ \\Leftarrow   $\\Longleftarrow$ \\Longleftarrow $\\Uparrow$ \\Uparrow   $\\Rightarrow$ \\Rightarrow $\\Longrightarrow$ \\Longrightarrow   $\\Downarrow$ \\Downarrow $\\Leftrightarrow$ \\Leftrightarrow   $\\Longleftrightarrow$ \\Longleftrightarrow $\\Updownarrow$ \\Updownarrow   $\\mapsto$ \\mapsto $\\longmapsto$ \\longmapsto   $\\nearrow$ \\nearrow $\\hookleftarrow$ \\hookleftarrow   $\\hookrightarrow$ \\hookrightarrow $\\searrow$ \\searrow   $\\leftharpoonup$ \\leftharpoonup $\\rightharpoonup$ \\rightharpoonup   $\\swarrow$ \\swarrow $\\leftharpoondown$ \\leftharpoondown   $\\rightharpoondown$ \\rightharpoondown $\\nwarrow$ \\nwarrow   $\\rightleftharpoons$ \\rightleftharpoons $\\iff$ \\iff   $\\leadsto$ \\leadsto       定界符\n    符号 指令 符号 指令 符号 指令     $($ ( $)$ ) $\\langle$ \\langle   $[$ [ $]$ ] $\\rangle$ \\rangle   $\\{$ \\\\{ $\\}$ \\\\} $\\vert$ \\vert   $\\lfloor$ \\lfloor $\\rfloor$ \\rfloor $\\Vert$ \\Vert   $\\lceil$ \\lceil $\\rceil$ \\rceil $/$ /     其他符号\n    符号 指令 符号 指令     $\\dots$ \\dots $\\cdots$ \\cdots   $\\vdots$ \\vdots $\\ddots$ \\ddots   $\\hbar$ \\hbar $\\imath$ \\imath   $\\jmath$ \\jmath $\\ell$ \\ell   $\\Re$ \\Re $\\Im$ \\Im   $\\aleph$ \\aleph $\\wp$ \\wp   $\\partial$ \\partial $'$ '   $\\emptyset$ \\emptyset $\\triangle$ \\triangle   $\\Box$ \\Box $\\Diamond$ \\Diamond   $\\bot$ \\bot $\\top$ \\top   $\\angle$ \\angle $\\surd$ \\surd   $\\diamondsuit$ \\diamondsuit $\\heartsuit$ \\heartsuit   $\\clubsuit$ \\clubsuit $\\spadesuit$ \\spadesuit   $\\neg $ \\neg or \\lnot $\\flat$ \\flat   $\\natural$ \\natural $\\sharp$ \\sharp   $\\mho$ \\mho      ","description":"","title":"LaTeX数学符号公式汇总","uri":"/posts/%E5%85%B6%E4%BB%96/latex%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B1%87%E6%80%BB/"},{"categories":["posts"],"content":" 文件路径：\\themes\\meme\\layouts\\partials\\custom\\footer.html\n 在footer.html文件中，添加下面代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  +\u003cscript type=\"text/x-mathjax-config\"\u003e + MathJax.Hub.Config({ + tex2jax: { + inlineMath: [['$','$'], ['\\\\(','\\\\)']], + displayMath: [['$$','$$'], ['\\[','\\]']], + processEscapes: true, + processEnvironments: true, + skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'], + TeX: { + equationNumbers: { autoNumber: \"AMS\" }, + extensions: [\"AMSmath.js\", \"AMSsymbols.js\"] + } + } + }); +\u003c/script\u003e +\u003cscript type=\"text/javascript\" async src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML\"\u003e\u003c/script\u003e   在下篇文章《LaTeX数学符号公式汇总》中进一步了解如何使用各种数学符号与数学公式。\n","description":"","title":"MathJax渲染数学公式","uri":"/posts/%E5%8D%9A%E5%AE%A2/hugo+mathjax%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E6%B8%B2%E6%9F%93/"},{"categories":["posts"],"content":"前几天参照网上的资源自己弄了个搜索框，主要是因为现在大部分的网页搜索首页老是会有一些杂乱的东西弹出来，关还关不掉。于是就自己想着整一个搜索界面。我的目的很简单，让界面看起来尽量简洁，因为是用来搜索资源的，所以一些无关紧要的东西都可以不要。参考Google浏览器的样式，于是就有了下面的极简搜索页面：只显示一个搜索框，其他的东西统统扔掉。\n今天突然想把这个搜索框整合到我的blog中来，哈哈哈，好像没多大的用，不过就是瞎折腾。这里我主要是记录一下加入百度搜索功能我做了哪些改变，说不定哪天不喜欢了我还可以参考这个记录把它给删掉。\n新增一个菜单项 首先在config.toml配置文件中的相应位置添加以下代码\n 文件位置：Hugo\\Sites\\blog\\config.toml\n 1 2 3 4 5 6 7 8 9 10 11 12  [[menu.main]] url = \"/about/\" name = \"关于\" weight = 5 pre = \"internal\" post = \"user-circle\" +\t[[menu.main]] + url = \"/search/\" + name = \"百度\" + weight = 6 + pre = \"internal\" + post = \"user-circle\"   下面是效果图 post = \"user-circle\"定义了菜单图标，这里我们先用..关于..菜单项的图标，等其他的问题解决了最后再来改图标。\n添加搜索样式 打开文件custom.scss\n 文件位置：Hugo\\Sites\\blog\\themes\\meme\\assets\\scss_custom\\custom.scss 在文件末尾加入样式代码\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  //设置百度search样式 .searchbar { border: rgb(120, 120, 120) solid 2px; border-radius: 2em; /*左右边框为半圆*/ width: 80%; height: 40px; box-shadow: 0px 0px 10px rgb(125, 125, 125); margin: 0 auto; /*重要！整个搜索框居中对齐*/ padding: 4px; /*margin-top: 90px;\t*/ } .search{ height: 38px; border:none; /*取消默认的边框以设置自定义边框*/ outline:none; /*取消浏览器默认的蓝光边框以设置自定义的输入框*/ vertical-align: middle; /*background: #000000*/ background-color:transparent;/*搜索框与搜索按钮透明*/ width: 90%; margin-left: 10px; font: bolder; font-size: 20px; color:rgb(120, 120, 120);\t}   新建“百度”菜单的_index.md 在文件夹blog/content下新建文件夹search，并在search文件夹下新建文件_index.md，并写入以下代码\n1 2 3 4 5  \u003cdiv class=\"searchbar\"\u003e \u003cform action=\"https://www.baidu.com/baidu?ie=utf-8\" target=\"blank\"\u003e \u003cinput class=\"search\" type=\"text\" placeholder=\"\" autocomplete=\"off\" name=\"word\"\u003e \u003c/form\u003e \u003c/div\u003e   修改图标 在SVG图标下载里找到相应的图标（直接搜索关键词search），下载下来之后将该图标的svg代码复制进SVG.toml文件中(有些小地方需要修改，svg标签中加入class=\"icon\")，例如，下面是我的SVG.toml文件：\n 文件位置：Hugo\\Sites\\blog\\themes\\meme\\data\\SVG.toml\n 1 2 3  arrow-up = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" class=\"icon\"\u003e\u003cpath d=\"M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z\"/\u003e\u003c/svg\u003e' + search = '\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" class=\"icon\"\u003e\u003cpath fill=\"currentColor\" d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"\u003e\u003c/path\u003e\u003c/svg\u003e'    再到config.toml文件中将百度菜单下的 post = \"user-circle\" 改为 post = \"search\"\n最后效果 ","description":"","title":"Blog中加入百度搜索","uri":"/posts/%E5%8D%9A%E5%AE%A2/blog%E4%B8%AD%E5%8A%A0%E5%85%A5%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2/"},{"categories":["posts"],"content":"字体排版  说明：任何一项留空，浏览器都会回退到主体字体 fontFamilyBody，故没必要全部设置。此外，如果你的品牌栏用的 SVG，则可留空品牌栏字体。\n 品牌栏\r\r1  fontFamilySiteBrand = \"'Liu Jian Mao Cao', cursive\"   菜单栏\r\r1  fontFamilyMenu = \"\"   各类标题\r\r 文章标题、文章副标题、列表标题、列表的年份和月份标题、相关文章标题、文章上下篇标题\n 1 2  #fontFamilyTitle = \"Comfortaa, sans-serif\" fontFamilyTitle = \"'Cinzel Decorative', 'Noto Serif SC', serif\"   目录、分节标题\r\r1 2  #fontFamilyHeadings = \"Comfortaa, sans-serif\" fontFamilyHeadings = \"'Cinzel Decorative', 'Noto Serif SC', serif\"   代码、上标\r\r 代码、上标、文章元信息、文章更新徽章、文章的 Git 版本信息、极简页脚\n 1 2  #fontFamilyCode = \"'Source Code Pro', monospace\" fontFamilyCode = \"'Source Code Pro', 'Noto Serif SC', monospace\"   引用\r\r1  fontFamilyQuote = \"'EB Garamond', 'STKaiti', 'KaiTi', 'SimKai', 'Noto Serif SC', serif\"   文章目录\r\r1  fontFamilyTOC = \"\"   说明文字\r\r1  fontFamilyCaption = \"\"   页脚\r\r1  fontFamilyFooter = \"'Ma Shan Zheng', cursive\"   主体\r\r1  fontFamilyBody = \"'EB Garamond', 'Noto Serif SC', serif\"   网络字体链接\r\r1  fontsLink = \"https://fonts.googleapis.com/css?family=EB+Garamond:400,400i,700,700i|Noto+Serif+SC:400,700|Source+Code+Pro:400,400i,700,700i|Cinzel+Decorative:700|Ma+Shan+Zheng:|Liu+Jian+Mao+Cao:\u0026display=swap\u0026subset=chinese-simplified\"    具体设置方式\n 进入https://fonts.google.com/ 之后，搜索或选择喜欢的字体库 点击加号，在屏幕右下角的弹框的CUSTOMIZE标签中进一步选择 点击EMBED标签 这里有生成的字体链接：https://fonts.googleapis.com/css?family=Noto+Serif+SC:300,400,500,700\u0026display=swap\u0026subset=chinese-simplified以及设置字体时填入的参数 'Noto Serif SC', serif\r\r\r例如，假设你的字体链接为fontsLink = \"https://fonts.googleapis.com/css?family=EB+Garamond:400,400i,700,700i|Noto+Serif+SC:400,700|Source+Code+Pro:400,400i,700,700i|Cinzel+Decorative:700\u0026display=swap\u0026subset=chinese-simplified\"\r\r\r现在你想给页脚fontFamilyFooter配置另一种字体，比如ZCOOL XiaoWei，去网站选择之后生成的信息如下： 现在你需要在原来的字体链接\u0026display=swap\u0026subset=chinese-simplified的前面加上|ZCOOL+XiaoWei:，然后设置fontFamilyFooter = \"'ZCOOL XiaoWei', serif\"，在本地预览一下，应该成功了！(注意观察上图生成的代码和你添加到配置文件中的区别)\r\r\r 说明：要想读者一定体验到你设置的字体，最好采用网络字体。MemE 主题目前仅支持 Google Fonts 的链接，请前往 https://fonts.google.com/ 获取。此项留空，则不会采用网络字体。\n 字号（单位：px）\r\r1  fontSize = 16   行间距 1  lineHeight = 2    说明：只会应用到文章的段落和目录\n 段首缩排 1 2 3 4  # 是否开启 enableParagraphIndent = true # 分段样式（全局设置） paragraphStyle = \"margin\"    说明：段间距式（margin）或段首缩排（indent）文章的 Front Matter 中 indent的优先级高于此处\n 两端对齐 1 2  # 是否开启（全局设置） enableJustify = true    说明：文章的 Front Matter 中的 align的优先级高于此处\n 首字下沉 1 2 3 4 5 6 7 8 9  # 是否开启（全局设置） # 说明：文章的 Front Matter 中的 `dropCap`的优先级高于此处 enableDropCap = true # 是否在每一分隔线之后首字下沉（全局设置） # 说明：文章的 Front Matter 中的 `dropCapAfterHr`的优先级高于此处 enableDropCapAfterHr = false # 是否删除首字下沉前的分隔线（全局设置） # 说明：文章的 Front Matter 中的 `deleteHrBeforeDropCap`的优先级高于此处 deleteHrBeforeDropCap = false   大型小写（英文） 1 2  # 是否开启（全局设置） enableSmallCaps = false    说明：只会应用到分节标题和目录标题文章的 Front Matter 中的 smallCaps的优先级高于此处\n 着重号  说明：MemE 主题自创的新 Markdown, 语法为在内容左右两边分别加上两个半角状态下的点..\n 1 2  # 是否开启 enableEmphasisPoint = true   文章版权 1 2 3 4  #是否开启 enablePostCopyright = true displayPostCopyright = false    说明：文章的 Front Matter 中的 displayCopyright的优先级高于此处\n 文章更新徽章 1 2 3 4 5  # 是否开启 enablePostUpdatedBadge = true # 是否显示（全局设置） displayUpdatedBadge = true    说明：文章的 Front Matter 中的 badge的优先级高于此处\n 1 2 3 4  # 是否添加 `title` enableBadgeTitle = true # `title` 的前缀 badgeTitlePrefix = \"Updated @ \"   相关文章 1 2 3 4 5  # 是否开启 enableRelatedPosts = true # 是否显示（全局设置） displayRelatedPosts = true    说明：文章的 Front Matter 中的 related的优先级高于此处\n 1 2 3 4  # 相关文章数 relatedPostsNumber = 5 # 相关文章标题右边的图标 relatedPostsIcon = \"plus-circle\"   文章标签\r\r1 2 3 4  # 是否开启 enablePostTags = true # 标签图标 postTagsIcon = \"tag\"   文章上下篇\r\r 说明：在 MemE 主题中，文章上下篇是从空间位置角度设计的，而不是像大多数其它主题所做的那样——从时间角度设计。因此，如果你点击左边的上篇，跳转的是一篇更新的文章；如果你点击右边的下篇，跳转的是一篇更旧的文章。\n 1 2 3 4 5  # 是否开启 enablePostNav = true # 是否仅限于相同的文章分区 postNavInSection = false   页脚 1 2  # 是否开启 enableFooter = true    说明：「诗意人生」和「视频片段」首页布局的首页没有页脚\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 是否显示版权符号（©） displayCopyrightSymbol = true # 是否显示站点的创建年份 displaySiteCreatedYear = true # Leave it empty(\"\") if you don’t wantthe icon # 年份与作者之间的图标 iconBetweenYearAndAuthor = \"heart\" iconColor = \"#e93448\" # 是否开启图标的跳动效果 iconAnimation = true # 是否显示 Hugo 和 MemE 的链接 displayPoweredBy = true # 是否显示站点的版权信息 displaySiteCopyright = true # 自定义页脚（支持 Markdown） customFooter = \"\"   极简页脚 1 2 3 4 5  # 是否开启 enableMinimalFooter = true # 是否开启关于页面的极简页脚 enableAboutPageMinimalFooter = true   返回顶部按钮 1 2 3 4 5 6  # 是否开启 enableBackToTop = true # 是否在首页显示 displayBackToTopInHome = true # 按钮图标 backToTopIcon = \"arrow-up\"   多语言 1 2 3 4 5 6 7 8  # 是否开启多语言按钮 enableLangToggle = true # 是否在首页隐藏多语言按钮 hideLangToggleInHome = false # 是否自动隐藏多语言按钮 autoHideLangToggle = false    说明：即仅当该文章有相应的翻译版本时才显示按钮\n back-to-top 样式 在文件back-to-top.scss中：\n 文件原始位置：\\themes\\meme\\assets\\scss\\_common\\back-to-top.scss\n文件位置更新为：\\themes\\meme\\assets\\scss\\components\\back-to-top.scss\n 1 2 3 4 5 6 7 8  .back-to-top { font-size: 120%; color: var(--color-contrast-medium); position: fixed; bottom: 1.2em; right: 1.2em; z-index: 1; }   归档、分类及标签页样式 归档样式\r\r 文件位置：\\themes\\meme\\assets\\scss\\layout\\list.scss\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  // 归档页总标题（posts） .list-title { text-align: center; } // 归档页文章列表 .list { ul { list-style: none; padding: 0; } } // 文章列表 .list-item { line-height: 2; position: relative; transition: border $duration; border-bottom: 1px dashed var(--color-contrast-low); margin-top: 1em; padding-bottom: 0.5em; display: flex; align-items: baseline; \u0026:hover { border-bottom-color: var(--color-primary); ::before { background: var(--color-primary); } } ::before { content: ' '; position: absolute; left: 0.618em; top: 0.618em; width: $fontSize / 3; height: $fontSize / 3; background: var(--color-contrast-low); border-radius: 50%; border: 1px solid var(--color-bg); transition: background $duration; font-size: $fontSize; } } // 列表中文章标题 .list-item-title { margin: 0 0.618em 0 2em; font-size: 1.1em; line-height: 1.2; } // 列表中时间 .list-item-time { margin: 0 0.618em 0 2em; color: var(--color-contrast-medium); line-height: 1.2; } // 年份 .list-year { display: flex; justify-content: space-between; align-items: baseline; }   分类样式\r\r 文件位置：\\themes\\meme\\assets\\scss\\pages\\_tree-categories.scss\n 1 2 3 4 5 6 7 8 9 10  .category-item { color: #02a1ff; font-size: 1.2em; \u0026:hover { color: blueviolet; } } .category-count { color: var(--color-contrast-medium); }   标签样式\r\r 文件位置：\\themes\\meme\\assets\\scss\\pages\\_tag-cloud.scss\n 1 2 3 4 5 6 7  .tag-cloud { text-align: center; } .tag-cloud-item { margin: ($fontSize * 0.5); display: inline-block; }   多媒体 audio 标签\r\r1 2 3 4 5  \u003c!--通过\u003caudio\u003e标签插入--\u003e \u003caudio controls height=\"100\" width=\"100\" style=\"clear:both;display:block;margin:auto\"\u003e \u003csource src=\"https://zccon.oss-cn-beijing.aliyuncs.com/Hugo/audios/Lame.mp3\" type=\"audio/mpeg\" /\u003e \u003cembed height=\"50\" width=\"100\" src=\"https://zccon.oss-cn-beijing.aliyuncs.com/Hugo/audios/Lame.mp3\" /\u003e \u003c/audio\u003e    DEMO:  video 标签\r\r1 2 3  \u003cvideo poster=\"https://zccon.oss-cn-beijing.aliyuncs.com/images/%E5%A4%A9%E6%89%8D%E5%B0%91%E5%A5%B3.png\" controls\u003e \u003csource src=\"https://zccon.oss-cn-beijing.aliyuncs.com/Hugo/videos/GeniusGirl.mp4\" /\u003e \u003c/video\u003e    DEMO:  网易云外链方式添加音乐\r\r在网页版网易云音乐中搜索需要的歌（不支持 ..无版权.. 或 ..会员.. 歌曲）\n点击生成外链播放器\n将生成的代码直接复制到文章中即可：（width和height自己调整）\n DEMO: 1 2 3 4 5 6 7 8 9  \u003ciframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"100%\" height=\"86\" src=\"//music.163.com/outchain/player?type=2\u0026id=167732\u0026auto=0\u0026height=66\" \u003e\u003c/iframe\u003e   效果：\n 自定义 自定义 Hugo Shortcodes 简码\n","description":"","title":"MemE主题优化（二）","uri":"/posts/%E5%8D%9A%E5%AE%A2/meme%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E4%BA%8C/"},{"categories":["posts"],"content":"前言 折腾了两天，总算是把这个博客给搭建起来了 😉😉!\n在写这篇文章之前，让我先啰嗦一下，毕竟认真搞了这么久，总有些话想说，想直接看..正文..的同学就..跳过..这段直接到第一章节吧！\n首先要感谢 👏 几个博主，第一次看到这个 ..博客主题.. MemE 是从 reuixiy 博客上看到的。第一眼就觉得这个主题特别干净，也就激起了我又一次搭建博客的兴趣（之前我其实就搭建过一个博客，当时是用hexo搭建的，现在博客还在用，不过由于速度确实不太行，就很少在上面写东西了）。说实话，我感觉 reuixiy 博主讲得实在太..详细..了，所以感觉自己只是在..照葫芦画瓢..🙃🙃🙃 。\n搭建博客的过程很简单，一般都不会有什么问题，所以这里我就写写关于MemE主题的各个细节的配置问题: ..一来..是自己想要更改博客主题样式的时候知道去哪个地方改？怎么改？🖊️ ..二来..可以提供给需要的朋友一些参考，让更多的人加入这个主题中来！❤️\n虽然之前有看过 reuixiy 博主的详细 站点配置文件 ，不过都是英文的，看得实在有点累（我的英文太水了 😐）。虽然基本上都是..见名知义..的，可我觉得还是一份中文的文档 📄 比较适合我。\n在更改各个配置的时候我所参考的大部分内容是来自 Guanqr 博主提交到 github 中的config.toml文件，里面所有的注释都是中文的，对我来说简直太爽了 😁😁😁！！！。然后有一些博客的写作格式也是从该博主的 commit 中找到的，自己也尝试着动手改改看，效果还不错！\n所以，这里就先谢谢这两位博主了 🎉🎉🎉，当然中途出现了一些问题都是从网上找到方法解决的，所以也要感谢那么多给我提供过帮助的博主们！！！🎉🎉🎉\n好了，不多说了，步入正题，首先给大家看看我的..博客结构目录..：\n博客目录结构 blog │ ├── archetypes ├── content ├── data ├── layouts ├── public ├── resources ├── static ├── themes └── config.toml 然后我们按照config.toml文件的大致内容依次梳理(会有部分内容与原文上下位置..不一致..)，其实大部分设置只需要..更改参数..就可以了，这里我就只把对应的..关键字..给出来，你们去自己的config.toml中查找关键字然后自己..更改参数..试试。这里附上我的config.toml文件。\n每一分页文章数 1  paginate = 6   代码高亮 1 2 3 4 5 6 7 8 9 10 11 12 13 14  # 代码块 # 是否开启高亮 enableHighlight = true # 是否开启竖直滚动 enableOverflowY = false # 最大高度 maxHeight = 20 # 单位：em # 是否开启复制 enableCopy = true # 是否开启自动隐藏 enableCopyAutoHide = false   作者信息 1 2 3 4 5 6 7 8 9 10 11 12 13  [author] # 名字 name = \"name\" # 邮箱 email = \"zccon1996@163.com\" # 座右铭或简介 motto = \"motto\" # 头像 avatar = \"/icons/apple-touch-icon.png\" # 网站（默认值：baseURL） website = \"https://ztygcs.github.io\" # 推特 #twitter = \"\"   菜单栏 菜单开关项\r\r 说明：如果activeInSection开启(设置为true)，那么当某一文章的分区名是某一菜单项中的 url 时，该文章页面中的该菜单项也会被高亮\n 1 2 3 4 5 6  # 是否开启菜单栏 enableMenu = true # 是否在首页显示 displayMenuInHome = true # 是否按文章分区高亮当前菜单项 activeInSection = true   菜单配置项\r\rMemE 主题支持以下四种菜单：\n1 2 3 4  # 1. main 顶栏下方的菜单栏 # 2. home 首页的底部链接（适用于「诗意人生」和「视频片段」布局） # 3. socials 社交栏（关于页面的极简页脚） # 4. links 链接栏（关于页面的极简页脚）   菜单内的配置说明\r\r1 2 3 4 5 6 7  # url 链接地址 # name 文本（留空（\"\"）则无） # weight 位置 # pre 内链（internal）或外链（external） # post 图标（留空（\"\"）则无） # identifier 图标的 Class 名（菜单栏无效）   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  [menu] ## Menu bar [[menu.main]] url = \"/\" name = \"首页\" weight = 1 pre = \"internal\" post = \"home\" [[menu.main]] url = \"/posts/\" name = \"归档\" weight = 2 pre = \"internal\" post = \"archive\" [[menu.main]] url = \"/categories/\" name = \"分类\" weight = 3 pre = \"internal\" post = \"th\" [[menu.main]] url = \"/tags/\" name = \"标签\" weight = 4 pre = \"internal\" post = \"tags\" [[menu.main]] url = \"/about/\" name = \"关于\" weight = 5 pre = \"internal\" post = \"user-circle\"   上面代码效果： 顶栏 1 2 3 4 5  # 是否开启 enableHeader = true # 是否在首页显示 displayHeaderInHome = true   品牌栏（在顶栏内）\r\r （SVG 图片..文件位置..：\\themes\\meme\\data\\SVG.toml）\n 1 2 3 4 5 6 7 8 9 10 11  # siteBrandSVG为true时显示 SVG 图片（请将你的 SVG 放到 `SVG.toml` 文件内，并配置以下项。单位：px） # siteBrandSVG为false时使用你的站点标题作为默认值，并以文字的形式显示（下方可配置字号和字色。字体到底部的字体部分配置。单位：em） siteBrandSVG = false # SVG宽度 siteBrandSVGWidth = 250 # SVG高度 siteBrandSVGHeight = 100 siteBrandSVGFill = \"#fff\" siteBrandFontSize = 3 siteBrandFontColor = \"#fff\"    注意：背景色和背景图片只能..二选一..\n 1 2 3 4  # 用来设置背景色（hsl 格式） #siteBrandBackgroundColor = \"hsl(240, 8%, 12%)\" # 背景图片 siteBrandBackgroundImage = \"linear-gradient(90deg, #f79533 0, #f37055 15%, #ef4e7b 30%, #a166ab 44%, #5073b8 58%, #1098ad 72%, #07b39b 86%, #6dba82 100%)\"   首页布局 MemE 主题有以下四种首页布局：\n   布局 说明     poetry 诗意人生   footage 视频片段   posts 文章摘要   page 普通页面    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #这里设置为文章摘要 homeLayout = \"posts\" ## 「诗意人生」 # 诗句，支持 Markdown homePoetry = [] # 底部链接的内间距，单位：em homeLinksPadding = 1 ## 「视频片段」 homePoster = \"\" homeVideoWebm = \"\" homeVideoMp4 = \"\" homeLogo = \"\" homeLogoLink = \"\" homeTitle = \"\" homeMotto = \"\" homeDescription = \"\" homeKeywords = \"\" homeLinksDelimiter = \"\"   分类页面 分类方式\r\rMemE 主题支持以下两种分类方式：\n   分类方式 说明     sections 分区   categories 部类     其中: 分区是基于站点的content目录下的文件夹和子文件夹； 部类是基于文章的Front Matter。 分类即树状分类，Hexo 是基于文章的 Front Matter，Hugo 则是基于文件系统的结构。由于设计理念的不同，导致了 Hexo 与 Hugo 的这个差异，故在此设计这个选项，以对从 Hexo 过来的用户友好。但是请注意：Hugo 中无法完全实现基于 Front Matter 的树状分类，故如需保留树状分类，建议适应 Hugo 的设计理念——分区。\n categoryBy = \"categories\"  注意：如果你设置为 sections，请务必将此配置文件中的类别（taxonomies）中的 categories 删除，不然分类页面会失效。\n 1 2 3 4  # 类别 [taxonomies] category = \"categories\" tag = \"tags\"   分类设置\r\r 注意：如果你设置 categoryBy 为 sections，则无法关闭树状布局\n 1 2 3 4 5 6  # 是否开启树状布局 enableTree = true # 分类页面中是否显示文章标题 displayPosts = false # 分类页面中是否显示每一分类下的文章数 displayPostsCount = true   文章分区范围 1 2 3 4 5  # 说明：分区的名字即站点的 content 目录下的文件夹的名字。 # mainSections = [\"posts\"] # 是否包括全文内容 includeContent = true    说明：如果includeContent为false，则只会包含文章的摘要。关于摘要，Hugo 能按你设置的字数限制自动截取，你也可以在文章中通过 \u003c !--more-- \u003e(没有空格)手动控制，或者在文章的 Front Matter 中通summary 手动指定。其中，应用的优先级顺序：手动指定 \u003e 手动控制 \u003e 自动截取。还需要注意的是，在 MemE 主题自定义的 Atom 和 RSS 的模板中，有一个比手动指定更高的优先级————Front Matter 中的 description。\n 文章首页摘要字数限制\r\r1  summaryLength = 150   标签页面 1 2 3 4 5 6 7 8  # 是否启用标签云 enableTagCloud = true # 单位 fontUnit = \"em\" # 最大字号 largestFontSize = 2.5 # 最小字号 smallestFontSize = 1   归档列表页面 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # 宽度;如果留空（\"\"），则用 42 作为默认值,单位：em listWidth = 36 # 是否显示列表标题 displayListTitle = true # 日期的格式,请遵循格式 https://gohugo.io/functions/format/ #listDateFormat = \"January 2\" listDateFormat = \"01 月 02 日\" # 日期的位置(left或right) listDatePosition = \"right\" # 是否按月份分隔列表 groupByMonth = false # 是否开启十二生肖 chineseZodiac = true # 是否翻译年份（仅对年份标题有效） i18nYear = true # 是否翻译月份（仅对月份标题有效） i18nMonth = true   深色模式 模式设置\r\r1 2 3 4 5 6 7 8  # 是否开启 enableDarkMode = true # 默认模式 (浅色模式:light或深色模式:dark) defaultTheme = \"light\" # 是否隐藏模式切换开关 hideThemeToggle = false # 是否在首页隐藏模式切换开关 hideThemeToggleInHome = false    说明：如果开启了深色模式，即使你隐藏了开关，你的读者依然可能以深色模式阅读你的博客，如果该读者的系统设置为深色模式的话。类似，如果你开启深色模式并将默认模式修改为它，即使你隐藏开关，你的读者依然可能以浅色模式模式阅读你的博客。\n 模式颜色\r\r1 2 3 4  # 浅色模式的主色 primaryColorLight = \"220, 90%, 56%\" # 深色模式的主色 primaryColorDark = \"201, 65%, 62%\"    注意：只支持 ..HSL.. 颜色值\n 文章设置  说明： 1.postWidth文章的内容宽度如果留空（\"\"），则用 42 作为默认值,单位：em 2.original会影响文章的作者信息和版权信息,文章的 Front Matter 中的 original的优先级高于此处\n 1 2 3 4 5 6 7 8  # 超链接的颜色变化持续时间（单位：秒） duration = 0.5 # 文章的内容宽度 postWidth = 36 # 文章是否为原创（全局设置） original = true # 文章描述是否显示 displayPostDescription = true   文章元信息\r\r   字段 说明     enablePostMeta 是否开启（全局）【文章的 Front Matter 中的 meta 优先级高于此】   enablePostMetaInHome 是否在首页开启【仅对「文章摘要」和「普通页面」布局有效】   postMetaDateFormat 日期格式【请遵循格式 https://gohugo.io/functions/format/】    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  enablePostMeta = true enablePostMetaInHome = true postMetaDateFormat = \"2006.1.2\" displayPublishedDate = true # 是否显示发布时间 publishedDateIcon = \"calendar-alt\" # 发布时间的图标 displayModifiedDate = true # 是否显示修改时间 modifiedDateIcon = \"calendar-check\" # 修改时间的图标 displayExpiredDate = true # 是否显示过期时间 expiredDateIcon = \"calendar-times\" # 过期时间的图标 displayCategory = true # 是否显示分类 categoryIcon = \"folder\" # 分类的图标 categoryDelimiter = \"/\" # 分类之间的分隔符 displayWordCount = true # 是否显示字数统计 wordCountIcon = \"pencil-alt\" # 字数统计的图标 displayReadingTime = true # 是否显示阅读时长 readingTimeIcon = \"clock\" # 阅读时长的图标   文章目录\r\r1 2 3 4 5 6  # 是否开启（全局设置）【文章的 Front Matter 中的 `toc`的优先级高于此处】 enableTOC = true # 是否显示目录标题 displayTOCTitle = true # 是否链接文章的分节标题到目录 linkHeadingsToTOC = true   文章分节标题锚点\r\r1 2 3 4 5 6 7 8 9 10 11 12  # 是否开启 enableHeadingsAnchor = true # 分节标题的级别范围【说明：正则格式，默认 1-6，即 1|2|3|4|5|6，即 h1 到 h6。】 headingsOpt = \"1-6\" # 锚点符号【说明：锚点图标的优先级高于锚点符号,默认值：§】 anchorSymbol = \"#\" # 锚点图标【说明：留空（\"\"）则回退到锚点符号】 anchorIcon = \"link\" # 是否开启锚点链接 enableAnchorLink = true # 是否自动隐藏锚点 enableAnchorAutoHide = true   图片说明文字 1 2 3 4  # 是否开启 enableCaption = true # 说明文字的前缀 captionPrefix = \"◎ \"   图片外链  说明：仅在生产环境（production）下渲染只支持相对于网站根目录的绝对链接比如：/images/meme.jpg(~/blog/static/images/meme.jpg)\n 1 2 3 4 5 6  # 是否开启 enableImageHost = false # 图片外链地址 imageHostURL = \"https://example.com/\" # 是否将 HTML 的头部元数据中的图片链接也替换为外链 headAlso = false   视频外链  说明：仅在生产环境（production）下渲染只支持相对于站点根目录的绝对链接比如：/videos/meme.mp4\n 1 2 3 4  # 是否开启 enableVideoHost = false # 视频外链地址 videoHostURL = \"https://example.com/\"   脚注 1 2 3 4  # 是否用方括号包裹脚注的引用序号 squareBrackets = true # 替换脚注的返回链接中的文本为图标 footnoteReturnLinkIcon = \"angle-up\"    说明：如果不为空（\"\"），则会用图标替换footnoteReturnLinkContents\n 1 2  # 是否自行插入分隔线 insertHrBySelf = true    说明：如果是，则会将自动生成的分隔线删除。实际上，你自己添加的分隔线会被删除。如果你喜欢在 Markdown 中手动插入--- 以将文章的正文内容与脚注内容分隔开来，那么这项设置将会非常有用。\n ","description":"","title":"MemE主题优化（一）","uri":"/posts/%E5%8D%9A%E5%AE%A2/meme%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E4%B8%80/"},{"categories":["posts"],"content":"Smileys \u0026 People 😀😃😄😁😆😅😂🤣😊😇🙂🙃😉😌😍😘😗😙😚😋😛😝😜🤪🤨🧐🤓😎🤩😏😒😞😔😟😕🙁☹️😣😖😫😩😢😭😤😠😡🤬🤯😳😱😨😰😥😓🤗🤔🤭🤫🤥😶😐😑😬🙄😯😦😧😮😲😴🤤😪😵🤐🤢🤮🤧😷🤒🤕🤑🤠😈👿👹👺🤡💩👻💀☠️👽👾🤖🎃😺😸😹😻😼😽🙀😿😾🤲👐🙌👏🤝👍👎👊✊🤛🤜🤞✌️🤟🤘👌👈👉👆👇☝️✋🤚🖐️🖖👋🤙💪🖕✍️🙏💄💋👄👅👂👃👣👁️👀🧠🗣️👤👥👶👧🧒👦👩🧑👨👱‍♀️👱👱‍♂️🧔👵🧓👴👲👳👳‍♀️👳‍♂️🧕👮👮‍♀️👮‍♂️👷👷‍♀️👷‍♂️💂‍♀️💂💂‍♂️🕵️🕵️‍♀️🕵️‍♂️👩‍⚕️👨‍⚕️👩‍🌾👨‍🌾👩‍🍳👨‍🍳👩‍🎓👨‍🎓👩‍🎤👨‍🎤👩‍🏫👨‍🏫👩‍🏭👨‍🏭👩‍💻👨‍💻👩‍💼👨‍💼👩‍🔧👨‍🔧👩‍🔬👨‍🔬👩‍🎨👨‍🎨👩‍🚒👨‍🚒👩‍✈️👨‍✈️👩‍🚀👨‍🚀👩‍⚖️👨‍⚖️👰🤵👸🤴🤶🎅🧙🧙‍♀️🧙‍♂️🧝🧝‍♀️🧝‍♂️🧛🧛‍♀️🧛‍♂️🧟🧟‍♀️🧟‍♂️🧞🧞‍♀️🧞‍♂️🧜🧜‍♀️🧜‍♂️🧚🧚‍♀️🧚‍♂️👼🤰🤱🙇🙇‍♀️🙇‍♂️💁💁‍♀️💁‍♂️🙅🙅‍♀️🙅‍♂️🙆🙆‍♀️🙆‍♂️🙋🙋‍♀️🙋‍♂️💃🕺👯👯‍♂️👯‍♀️🕴️🚶🚶‍♀️🚶‍♂️🏃🏃‍♀️🏃‍♂🧑‍🤝‍🧑👫👭👬💑👩‍❤️‍👨👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋👨👩‍❤️‍💋👩👨‍❤️‍💋👨👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👦👩‍👧👩‍👧‍👦👩‍👦‍👦👩‍👧‍👧👨‍👦👨‍👧👨‍👧‍👦👨‍👦‍👦👨‍👧‍👧🧥👚👕👖👔👗👙👘👠👡👢👞👟🧦🧤🧣🎩🧢👒🎓⛑️👑💍👝👛👜💼🎒👓🕶️🌂\nAnimals \u0026 Nature 🐶🐱🐭🐹🐰🦊🐻🐼🐨🐯🦁🐮🐷🐽🐸🐵🙈🙉🙊🐒🐔🐧🐦🐤🐣🐥🦆🦅🦉🦇🐺🐗🐴🦄🐝🐛🦋🐌🐚🐞🐜🦗🕷️🕸️🦂🐢🐍🦎🦖🦕🐙🦑🦐🦀🐡🐠🐟🐬🐳🐋🦈🐊🐅🐆🦓🦍🐘🦏🐪🐫🦒🐃🐂🐄🐎🐖🐏🐑🐐🐕🦌🐕‍🐩🐈🐓🦃🕊️🐇🐁🐀🐿️🦔🐾🐉🐲🌵🎄🌲🌳🌴🌱🌿☘️🍀🎍🎋🍃🍂🍁🍄🌾💐🌷🌹🥀🌺🌸🌼🌻🌞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙🌎🌍🌏💫⭐🌟✨⚡☄️💥🔥🌪️🌈☀️🌤️⛅🌥️☁️🌦️🌧️⛈️🌩️🌨️❄️☃️⛄🌬️💨💧💦☔☂️🌊🌫️\nFood \u0026 Drink 🍏🍎🍐🍊🍋🍌🍉🍇🍓🍈🍒🍑🍍🥥🥝🍅🍆🥑🥦🥒🌶️🌽🥕🥔🍠🥐🍞🥖🥨🧀🥚🍳🥞🥓🥩🍗🍖🌭🍔🍟🍕🥪🥙🌮🌯🥗🥘🥫🍝🍜🍲🍛🍣🍱🥟🍤🍙🍚🍘🍥🥠🍢🍡🍧🍨🍦🥧🍰🎂🍮🍭🍬🍫🍿🍩🍪🌰🥜🍯🥛🍼☕🍵🥤🍶🍺🍻🥂🍷🥃🍸🍹🍾🥄🍴🍽️🥣🥡🥢\nActivity ⚽🏀🏈⚾🎾🏐🏉🎱🏓🏸🏒🏑🏏🥅⛳🏹🎣🥊🥋🎽🛷⛸️🥌🎿⛷️🏂🏋️🏋️‍♀️🏋️‍♂️🤼🤼♀️🤼♂️🤸🤸‍♀️🤸‍♂️⛹️⛹️‍♀️⛹️‍♂️🤺🤾🤾‍♀️🤾‍♂️🏌️🏌️‍♀️🏌️‍♂️🏇🧘🧘‍♀️🧘‍♂️🏄🏄‍♀️🏄‍♂️🏊🏊‍♀️🏊‍♂️🤽🤽‍♀️🤽‍♂️🚣🚣‍♀️🚣‍♂️🧗🧗‍♀️🧗‍♂️🚵🚵‍♀️🚵‍♂️🚴🚴‍♀️🚴‍♂️🏆🥇🥈🥉🏅🎖️🏵️🎗️🎫🎟️🎪🤹🤹‍♀️🤹‍♂️🎭🎨🎬🎤🎧🎼🎹🥁🎷🎺🎸🎻🎲♟️🎯🎳🎮🎰\nTravel \u0026 Places 🚗🚕🚙🚌🚎🏎️🚓🚑🚐🚒🚚🚛🚜🛵🏍️🛴🚲🚨🚔🚍🚘🚖🚡🚠🚟🚃🚋🚞🚝🚄🚅🚈🚂🚆🚇🚊🚉✈️🛫🛬🛩️💺🛰️🚀🛸🚁🛶⛵🚤🛥️🛳️⛴️🚢⚓⛽🚧🚦🚥🚏🗺️🗿🗽🗼🏰🏯🏟️🎡🎢🎠⛲⛱️🏖️🏝️🏜️🌋⛰️🏔️🗻🏕️⛺🏠🏡🏘️🏚️🏗️🏭🏢🏬🏣🏤🏥🏦🏨🏪🏫🏩💒🏛️⛪🕌🕍🕋⛩️🛤️🛣️🗾🎑🏞️🌅🌄🌠🎇🎆🌇🌆🏙️🌃🌌🌉🌁\nObjects ⌚📱📲💻⌨️🖥️🖨️🖱️🖲️🕹️🗜️💽💾💿📀📼📷📸📹🎥📽️🎞️📞☎️📟📠📺📻🎙️🎚️🎛️⏱️⏲️⏰🕰️⌛⏳📡🔋🔌💡🔦🕯️🛢️💸💵💴💶💷💰💳💎⚖️🔧🔨⚒️🛠️⛏️🔩⚙️⛓️⚔️🛡️🚬⚰️⚱️🏺🔮📿💈⚗️🔭🔬🕳️💊💉🌡️🚽🚰🚿🛁🛀🛎️🔑🗝️🚪🛋️🛏️🛌🖼️🛍️🛒🎁🎈🎏🎀🎊🎉🎎🏮🎐✉️📩📨📧💌📥📤📦🏷️📪📫📬📭📮📯📜📃📄📑🧾📊📈📉🗒️🗓️📆📅🗑️📇🗃️🗳️🗄️📋📁📂🗂️🗞️📰📓📔📒📕📗📘📙📚📖🔖🔗📎🖇️📐📏📌📍✂️🖊️🖋️✒️🖌️🖍️📝✏️🔍🔎🔏🔐🔒🔓\nSymbols ❤️🧡💛💚💙💜🖤💔❣️💕💞💓💗💖💘💝💟☮️✝️☪️🕉️☸️✡️🔯🕎☯️☦️🛐⛎♈♉♊♋♌♍♎♏♐♑♒♓🆔⚛️🉑☢️☣️📴📳🈶🈚🈸🈺🈷️✴️🆚💮🉐㊙️㊗️🈴🈵🈹🈲🅰️🅱️🆎🆑🅾️🆘❌⭕🛑⛔📛🚫💯💢♨️🚷🚯🚳🚱🔞📵🚭❗❕❓❔🔆️⚠️🚸🔱⚜️🔰♻️✅🈯💹❇️✳️🔣ℹ️🔤🔡🔠🆖🆗🆙🆒🆕🆓0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟🔢⏏️▶️⏸️⏯️⏹️⏺️⏭️⏮️⏩⏪⏬◀➡️⬅️⬆️⬇️↪️↩️⤴️⤵️🔀🔁🔂🔄🔃🎵🎶➕➖➗✖️💲🔚🔙🔛🔝🔜✔️☑️🔘⚪⚫🔴🔵🔺🔻🔶🔷🔳🔲🔈🔇🔉🔊🔔🔕📣📢🗨️👁️‍🗨️💬💭🗯️🃏🎴🀄🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧️⚕️\nFlags 🏳️🏴🏁🚩🏳️‍🌈🏴‍☠️\n","description":"","title":"Emoji表情库（一）","uri":"/posts/%E5%85%B6%E4%BB%96/emoji%E8%A1%A8%E6%83%85%E5%BA%93%E4%B8%80/"},{"categories":["posts"],"content":"要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码1。\n它们以冒号开头和结尾，并且包含 emoji 的 代码:\n1  :代码:   以下符号清单是 emoji 代码的非常有用的参考.\n表情与情感 笑脸表情    图标 代码 图标 代码 图标 代码     😀 grinning 😃 smiley 😄 smile   😁 grin 😆 laughing/satisfied 😅 sweat_smile   🤣 rofl 😂 joy 🙂 slightly_smiling_face   🙃 upside_down_face 😉 wink 😊 blush   😇 innocent        爱意表情    图标 代码 图标 代码 图标 代码     😍 heart_eyes 😘 kissing_heart 😗 kissing   ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes    吐舌头表情    图标 代码 图标 代码     😋 yum 😛 stuck_out_tongue   😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes   🤑 money_mouth_face      带手的表情    图标 代码 图标 代码     🤗 hugs 🤔 thinking    中性表情    图标 代码 图标 代码 图标 代码     🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless   😶 no_mouth 😏 smirk 😒 unamused   🙄 roll_eyes 😬 grimacing 🤥 lying_face    困倦的表情    图标 代码 图标 代码 图标 代码     😌 relieved 😔 pensive 😪 sleepy   🤤 drooling_face 😴 sleeping      不适的表情    图标 代码 图标 代码     😷 mask 🤒 face_with_thermometer   🤕 face_with_head_bandage 🤢 nauseated_face   🤧 sneezing_face 😵 dizzy_face    戴帽子的表情    图标 代码 图标 代码     🤠 cowboy_hat_face      戴眼镜的表情    图标 代码 图标 代码     😎 sunglasses 🤓 nerd_face    担心的表情    图标 代码 图标 代码     😕 confused 😟 worried   🙁 slightly_frowning_face ☹ frowning_face   😮 open_mouth 😯 hushed   😲 astonished 😳 flushed   😦 frowning 😧 anguished   😨 fearful 😰 cold_sweat   😥 disappointed_relieved 😢 cry   😭 sob 😱 scream   😖 confounded 😣 persevere   😞 disappointed 😓 sweat   😩 weary 😫 tired_face    否定的表情    图标 代码 图标 代码     😤 triumph 😡 pout rage   😠 angry 😈 smiling_imp   👿 imp 💀 skull   ☠️ skull_and_crossbones      特殊打扮的表情    图标 代码 图标 代码     💩 hankey poop shit 🤡 clown_face   👹 japanese_ogre 👺 japanese_goblin   👻 ghost 👽 alien   👾 space_invader 🤖 robot    猫脸表情    图标 代码 图标 代码 图标 代码     😺 smiley_cat 😸 smile_cat 😹 joy_cat   😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat   🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat    猴脸表情    图标 代码 图标 代码 图标 代码     🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil    情感    图标 代码 图标 代码     💋 kiss 💌 love_letter   💘 cupid 💝 gift_heart   💖 sparkling_heart 💗 heartpulse   💓 heartbeat 💞 revolving_hearts   💕 two_hearts 💟 heart_decoration   ❣️ heavy_heart_exclamation 💔 broken_heart   ❤️ heart 💛 yellow_heart   💚 green_heart 💙 blue_heart   💜 purple_heart 🖤 black_heart   💯 100 💢 anger   💥 boom collision 💫 dizzy   💦 sweat_drops 💨 dash   🕳️ hole 💣 bomb   💬 speech_balloon 👁️‍🗨️ eye_speech_bubble   🗯️ right_anger_bubble 💭 thought_balloon   💤 zzz      人与身体 张开手掌的手势    图标 代码 图标 代码     👋 wave 🤚 raised_back_of_hand   🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand   🖖 vulcan_salute      部分手指的手势    图标 代码 图标 代码     👌 ok_hand ✌️ v   🤞 crossed_fingers 🤘 metal   🤙 call_me_hand      一根手指的手势    图标 代码 图标 代码     👈 point_left 👉 point_right   👆 point_up_2 🖕 fu middle_finger   👇 point_down ☝️ point_up    握紧的手势    图标 代码 图标 代码     👍 +1 thumbsup 👎 -1 thumbsdown   ✊ fist fist_raised 👊 facepunch fist_oncoming punch   🤛 fist_left 🤜 fist_right    两只手    图标 代码 图标 代码     👏 clap 🙌 raised_hands   👐 open_hands 🤝 handshake   🙏 pray      握住东西的手势    图标 代码 图标 代码     ✍️ writing_hand 💅 nail_care   🤳 selfie      身体部位    图标 代码 图标 代码     💪 muscle 👂 ear   👃 nose 👀 eyes   👁️ eye 👅 tongue   👄 lips      人    图标 代码 图标 代码     👶 baby 👦 boy   👧 girl 👱‍♂️ blonde_man person_with_blond_hair   👨 man 👩 woman   👱‍♀️ blonde_woman 👴 older_man   👵 older_woman      身体动作    图标 代码 图标 代码     🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man   🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man   🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man   🙆‍♀️ ok_woman 🙆‍♂️ ok_man   💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man   🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man   🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman   🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming   🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging    人物角色    图标 代码 图标 代码     👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker   👨‍🎓 man_student 👩‍🎓 woman_student   👨‍🏫 man_teacher 👩‍🏫 woman_teacher   👨‍⚖️ man_judge 👩‍⚖️ woman_judge   👨‍🌾 man_farmer 👩‍🌾 woman_farmer   👨‍🍳 man_cook 👩‍🍳 woman_cook   👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic   👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker   👨‍💼 man_office_worker 👩‍💼 woman_office_worker   👨‍🔬 man_scientist 👩‍🔬 woman_scientist   👨‍💻 man_technologist 👩‍💻 woman_technologist   👨‍🎤 man_singer 👩‍🎤 woman_singer   👨‍🎨 man_artist 👩‍🎨 woman_artist   👨‍✈️ man_pilot 👩‍✈️ woman_pilot   👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut   👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter   👮‍♂️ cop policeman 👮‍♀️ policewoman   🕵 detective male_detective 🕵️‍♀️ female_detective   💂‍♂️ guardsman 💂‍♀️ guardswoman   👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman   🤴 prince 👸 princess   👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban   👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo   👰 bride_with_veil 🤰 pregnant_woman    幻想的人物    图标 代码 图标 代码     👼 angel 🎅 santa   🤶 mrs_claus      人物活动    图标 代码 图标 代码     💆‍♀️ massage massage_woman 💆‍♂️ massage_man   💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man   🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman   🏃‍♂️ runner running running_man 🏃‍♀️ running_woman   💃 dancer 🕺 man_dancing   🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women   👯‍♂️ dancing_men      体育    图标 代码 图标 代码     🤺 person_fencing 🏇 horse_racing   ⛷️ skier 🏂 snowboarder   🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman   🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman   🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman   🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman   ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman   🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman   🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman   🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman   🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling   🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling   🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo   🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball   🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling    休息    图标 代码 图标 代码     🛀 bath 🛌 sleeping_bed    家庭    图标 代码 图标 代码     👭 two_women_holding_hands 👫 couple   👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman   👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman   👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man   👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy   👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy   👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl   👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl   👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy   👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy   👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy   👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl   👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy   👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy   👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy   👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl   👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl    人物符号    图标 代码 图标 代码     🗣 speaking_head 👤 bust_in_silhouette   👥 busts_in_silhouette 👣 footprints    动物与自然 哺乳动物    图标 代码 图标 代码     🐵 monkey_face 🐒 monkey   🦍 gorilla 🐶 dog   🐕 dog2 🐩 poodle   🐺 wolf 🦊 fox_face   🐱 cat 🐈 cat2   🦁 lion 🐯 tiger   🐅 tiger2 🐆 leopard   🐴 horse 🐎 racehorse   🦄 unicorn 🦌 deer   🐮 cow 🐂 ox   🐃 water_buffalo 🐄 cow2   🐷 pig 🐖 pig2   🐗 boar 🐽 pig_nose   🐏 ram 🐑 sheep   🐐 goat 🐪 dromedary_camel   🐫 camel 🐘 elephant   🦏 rhinoceros 🐭 mouse   🐁 mouse2 🐀 rat   🐹 hamster 🐰 rabbit   🐇 rabbit2 🐿️ chipmunk   🦇 bat 🐻 bear   🐨 koala 🐼 panda_face   🐾 feet paw_prints      鸟类    图标 代码 图标 代码     🦃 turkey 🐔 chicken   🐓 rooster 🐣 hatching_chick   🐤 baby_chick 🐥 hatched_chick   🐦 bird 🐧 penguin   🕊 dove 🦅 eagle   🦆 duck 🦉 owl    两栖动物    icon code icon code     🐸 frog      爬虫类    图标 代码 图标 代码     🐊 crocodile 🐢 turtle   🦎 lizard 🐍 snake   🐲 dragon_face 🐉 dragon    海洋动物    图标 代码 图标 代码     🐳 whale 🐋 whale2   🐬 dolphin flipper 🐟 fish   🐠 tropical_fish 🐡 blowfish   🦈 shark 🐙 octopus   🐚 shell      虫类    图标 代码 图标 代码     🐌 snail 🦋 butterfly   🐛 bug 🐜 ant   🐝 bee honeybee 🪲 beetle   🕷️ spider 🕸️ spider_web   🦂 scorpion      花类植物    图标 代码 图标 代码     💐 bouquet 🌸 cherry_blossom   💮 white_flower 🏵️ rosette   🌹 rose 🥀 wilted_flower   🌺 hibiscus 🌻 sunflower   🌼 blossom 🌷 tulip    其它植物    图标 代码 图标 代码     🌱 seedling 🌲 evergreen_tree   🌳 deciduous_tree 🌴 palm_tree   🌵 cactus 🌾 ear_of_rice   🌿 herb ☘️ shamrock   🍀 four_leaf_clover 🍁 maple_leaf   🍂 fallen_leaf 🍃 leaves    食物与饮料 水果    图标 代码 图标 代码     🍇 grapes 🍈 melon   🍉 watermelon 🍊 mandarin orange tangerine   🍋 lemon 🍌 banana   🍍 pineapple 🍎 apple   🍏 green_apple 🍐 pear   🍑 peach 🍒 cherries   🍓 strawberry 🥝 kiwi_fruit   🍅 tomato      蔬菜    图标 代码 图标 代码     🥑 avocado 🍆 eggplant   🥔 potato 🥕 carrot   🌽 corn 🌶️ hot_pepper   🥒 cucumber 🍄 mushroom   🥜 peanuts 🌰 chestnut    快餐    图标 代码 图标 代码     🍞 bread 🥐 croissant   🥖 baguette_bread 🥞 pancakes   🧀 cheese 🍖 meat_on_bone   🍗 poultry_leg 🥓 bacon   🍔 hamburger 🍟 fries   🍕 pizza 🌭 hotdog   🌮 taco 🌯 burrito   🥙 stuffed_flatbread 🥚 egg   🍳 fried_egg 🥘 shallow_pan_of_food   🍲 stew 🥗 green_salad   🍿 popcorn      亚洲食物    图标 代码 图标 代码     🍱 bento 🍘 rice_cracker   🍙 rice_ball 🍚 rice   🍛 curry 🍜 ramen   🍝 spaghetti 🍠 sweet_potato   🍢 oden 🍣 sushi   🍤 fried_shrimp 🍥 fish_cake   🍡 dango      海鲜    图标 代码 图标 代码     🦀 crab 🦐 shrimp   🦑 squid      甜点    图标 代码 图标 代码     🍦 icecream 🍧 shaved_ice   🍨 ice_cream 🍩 doughnut   🍪 cookie 🎂 birthday   🍰 cake 🍫 chocolate_bar   🍬 candy 🍭 lollipop   🍮 custard 🍯 honey_pot    饮料    图标 代码 图标 代码     🍼 baby_bottle 🥛 milk_glass   ☕ coffee 🍵 tea   🍶 sake 🍾 champagne   🍷 wine_glass 🍸 cocktail   🍹 tropical_drink 🍺 beer   🍻 beers 🥂 clinking_glasses   🥃 tumbler_glass      餐具    图标 代码 图标 代码     🍽️ plate_with_cutlery 🍴 fork_and_knife   🥄 spoon 🔪 hocho knife   🏺 amphora      旅游与地理 地图    图标 代码 图标 代码     🌍 earth_africa 🌎 earth_americas   🌏 earth_asia 🌐 globe_with_meridians   🗺️ world_map 🗾 japan    地理现象    图标 代码 图标 代码     🏔 mountain_snow ⛰️ mountain   🌋 volcano 🗻 mount_fuji   🏕️ camping ⛱ beach_umbrella   🏜️ desert 🏝️ desert_island   🏞️ national_park      建筑物    图标 代码 图标 代码     🏟️ stadium 🏛️ classical_building   🏗️ building_construction 🏘 houses   🏚 derelict_house 🏠 house   🏡 house_with_garden 🏢 office   🏣 post_office 🏤 european_post_office   🏥 hospital 🏦 bank   🏨 hotel 🏩 love_hotel   🏪 convenience_store 🏫 school   🏬 department_store 🏭 factory   🏯 japanese_castle 🏰 european_castle   💒 wedding 🗼 tokyo_tower   🗽 statue_of_liberty      宗教建筑    图标 代码 图标 代码     ⛪ church 🕌 mosque   🕍 synagogue ⛩️ shinto_shrine   🕋 kaaba      其它地点    图标 代码 图标 代码     ⛲ fountain ⛺ tent   🌁 foggy 🌃 night_with_stars   🏙️ cityscape 🌄 sunrise_over_mountains   🌅 sunrise 🌆 city_sunset   🌇 city_sunrise 🌉 bridge_at_night   ♨️ hotsprings 🎠 carousel_horse   🎡 ferris_wheel 🎢 roller_coaster   💈 barber 🎪 circus_tent    陆路运输    图标 代码 图标 代码     🚂 steam_locomotive 🚃 railway_car   🚄 bullettrain_side 🚅 bullettrain_front   🚆 train2 🚇 metro   🚈 light_rail 🚉 station   🚊 tram 🚝 monorail   🚞 mountain_railway 🚋 train   🚌 bus 🚍 oncoming_bus   🚎 trolleybus 🚐 minibus   🚑 ambulance 🚒 fire_engine   🚓 police_car 🚔 oncoming_police_car   🚕 taxi 🚖 oncoming_taxi   🚗 car red_car 🚘 oncoming_automobile   🚙 blue_car 🚚 truck   🚛 articulated_lorry 🚜 tractor   🏎️ racing_car 🏍 motorcycle   🛵 motor_scooter 🚲 bike   🛴 kick_scooter 🚏 busstop   🛣️ motorway 🛤️ railway_track   🛢️ oil_drum ⛽ fuelpump   🚨 rotating_light 🚥 traffic_light   🚦 vertical_traffic_light 🛑 stop_sign   🚧 construction      水路运输    图标 代码 图标 代码     ⚓ anchor ⛵ boat sailboat   🛶 canoe 🚤 speedboat   🛳️ passenger_ship ⛴️ ferry   🛥️ motor_boat 🚢 ship    空中运输    图标 代码 图标 代码     ✈️ airplane 🛩️ small_airplane   🛫 flight_departure 🛬 flight_arrival   💺 seat 🚁 helicopter   🚟 suspension_railway 🚠 mountain_cableway   🚡 aerial_tramway 🛰️ artificial_satellite   🚀 rocket      旅馆    icon code icon code     🛎️ bellhop_bell      时间    图标 代码 图标 代码     ⌛ hourglass ⏳ hourglass_flowing_sand   ⌚ watch ⏰ alarm_clock   ⏱️ stopwatch ⏲️ timer_clock   🕰️ mantelpiece_clock 🕛 clock12   🕧 clock1230 🕐 clock1   🕜 clock130 🕑 clock2   🕝 clock230 🕒 clock3   🕞 clock330 🕓 clock4   🕟 clock430 🕔 clock5   🕠 clock530 🕕 clock6   🕡 clock630 🕖 clock7   🕢 clock730 🕗 clock8   🕣 clock830 🕘 clock9   🕤 clock930 🕙 clock10   🕥 clock1030 🕚 clock11   🕦 clock1130      天空与天气    图标 代码 图标 代码     🌑 new_moon 🌒 waxing_crescent_moon   🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon   🌕 full_moon 🌖 waning_gibbous_moon   🌗 last_quarter_moon 🌘 waning_crescent_moon   🌙 crescent_moon 🌚 new_moon_with_face   🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face   🌡️ thermometer ☀️ sunny   🌝 full_moon_with_face 🌞 sun_with_face   ⭐ star 🌟 star2   🌠 stars 🌌 milky_way   ☁️ cloud ⛅ partly_sunny   ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud   🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud   🌧 cloud_with_rain 🌨 cloud_with_snow   🌩 cloud_with_lightning 🌪️ tornado   🌫️ fog 🌬 wind_face   🌀 cyclone 🌈 rainbow   🌂 closed_umbrella ☂️ open_umbrella   ☂️ umbrella ⛱️ parasol_on_ground   ⚡ zap ❄️ snowflake   ☃️ snowman_with_snow ☃️ snowman   ☄️ comet 🔥 fire   💧 droplet 🌊 ocean    活动 事件    图标 代码 图标 代码     🎃 jack_o_lantern 🎄 christmas_tree   🎆 fireworks 🎇 sparkler   ✨ sparkles 🎈 balloon   🎉 tada 🎊 confetti_ball   🎋 tanabata_tree 🎍 bamboo   🎎 dolls 🎏 flags   🎐 wind_chime 🎑 rice_scene   🎀 ribbon 🎁 gift   🎗️ reminder_ribbon 🎟 tickets   🎫 ticket      奖杯与奖牌    图标 代码 图标 代码     🎖️ medal_military 🏆 trophy   🏅 medal_sports 🥇 1st_place_medal   🥈 2nd_place_medal 🥉 3rd_place_medal    体育运动    图标 代码 图标 代码     ⚽ soccer ⚾ baseball   🏀 basketball 🏐 volleyball   🏈 football 🏉 rugby_football   🎾 tennis 🎳 bowling   🦗 cricket 🏑 field_hockey   🏒 ice_hockey 🏓 ping_pong   🏸 badminton 🥊 boxing_glove   🥋 martial_arts_uniform 🥅 goal_net   ⛳ golf ⛸️ ice_skate   🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash   🎿 ski      游戏    图标 代码 图标 代码     🎯 dart 🎱 8ball   🔮 crystal_ball 🎮 video_game   🕹️ joystick 🎰 slot_machine   🎲 game_die ♠️ spades   ♥️ hearts ♦️ diamonds   ♣️ clubs 🃏 black_joker   🀄 mahjong 🎴 flower_playing_cards    艺术与工艺    图标 代码 图标 代码     🎭 performing_arts 🖼 framed_picture   🎨 art      物品 服装    图标 代码 图标 代码     👓 eyeglasses 🕶️ dark_sunglasses   👔 necktie 👕 shirt tshirt   👖 jeans 👗 dress   👘 kimono 👙 bikini   👚 womans_clothes 👛 purse   👜 handbag 👝 pouch   🛍️ shopping 🎒 school_satchel   👞 mans_shoe shoe 👟 athletic_shoe   👠 high_heel 👡 sandal   👢 boot 👑 crown   👒 womans_hat 🎩 tophat   🎓 mortar_board ⛑️ rescue_worker_helmet   📿 prayer_beads 💄 lipstick   💍 ring 💎 gem    声音    图标 代码 图标 代码     🔇 mute 🔈 speaker   🔉 sound 🔊 loud_sound   📢 loudspeaker 📣 mega   📯 postal_horn 🔔 bell   🔕 no_bell      音乐    图标 代码 图标 代码     🎼 musical_score 🎵 musical_note   🎶 notes 🎙️ studio_microphone   🎚️ level_slider 🎛️ control_knobs   🎤 microphone 🎧 headphones   📻 radio      乐器    图标 代码 图标 代码     🎷 saxophone 🎸 guitar   🎹 musical_keyboard 🎺 trumpet   🎻 violin 🥁 drum    电话    图标 代码 图标 代码     📱 iphone 📲 calling   ☎️ phone telephone 📞 telephone_receiver   📟 pager 📠 fax    电脑    图标 代码 图标 代码     🔋 battery 🔌 electric_plug   💻 computer 🖥️ desktop_computer   🖨️ printer ⌨️ keyboard   🖱 computer_mouse 🖲️ trackball   💽 minidisc 💾 floppy_disk   💿 cd 📀 dvd    灯光与影像    图标 代码 图标 代码     🎥 movie_camera 🎞️ film_strip   📽️ film_projector 🎬 clapper   📺 tv 📷 camera   📸 camera_flash 📹 video_camera   📼 vhs 🔍 mag   🔎 mag_right 🕯️ candle   💡 bulb 🔦 flashlight   🏮 izakaya_lantern lantern      书与纸张    图标 代码 图标 代码     📔 notebook_with_decorative_cover 📕 closed_book   📖 book open_book 📗 green_book   📘 blue_book 📙 orange_book   📚 books 📓 notebook   📒 ledger 📃 page_with_curl   📜 scroll 📄 page_facing_up   📰 newspaper 🗞️ newspaper_roll   📑 bookmark_tabs 🔖 bookmark   🏷️ label      钱    图标 代码 图标 代码     💰 moneybag 💴 yen   💵 dollar 💶 euro   💷 pound 💸 money_with_wings   💳 credit_card 💹 chart    邮件    图标 代码 图标 代码     ✉️ email envelope 📧 📧   📨 incoming_envelope 📩 envelope_with_arrow   📤 outbox_tray 📥 inbox_tray   📦 package 📫 mailbox   📪 mailbox_closed 📬 mailbox_with_mail   📭 mailbox_with_no_mail 📮 postbox   🗳 ballot_box      书写    图标 代码 图标 代码     ✏️ pencil2 ✒️ black_nib   🖋 fountain_pen 🖊 pen   🖌 paintbrush 🖍 crayon   📝 memo pencil      办公    图标 代码 图标 代码     💼 briefcase 📁 file_folder   📂 open_file_folder 🗂️ card_index_dividers   📅 date 📆 calendar   🗒 spiral_notepad 🗓 spiral_calendar   📇 card_index 📈 chart_with_upwards_trend   📉 chart_with_downwards_trend 📊 bar_chart   📋 clipboard 📌 pushpin   📍 round_pushpin 📎 paperclip   🖇 paperclips 📏 straight_ruler   📐 triangular_ruler ✂️ scissors   🗃️ card_file_box 🗄️ file_cabinet   🗑️ wastebasket      锁    图标 代码 图标 代码     🔒 lock 🔓 unlock   🔏 lock_with_ink_pen 🔐 closed_lock_with_key   🔑 key 🗝️ old_key    工具    图标 代码 图标 代码     🔨 hammer ⛏️ pick   ⚒️ hammer_and_pick 🛠️ hammer_and_wrench   🗡 dagger ⚔️ crossed_swords   🔫 gun 🏹 bow_and_arrow   🛡️ shield 🔧 wrench   🔩 nut_and_bolt ⚙️ gear   🗜 clamp ⚖ balance_scale   🔗 link ⛓️ chains    科学    图标 代码 图标 代码     ⚗️ alembic 🔬 microscope   🔭 telescope 🛰️ satellite    医疗    图标 代码 图标 代码     💉 syringe 💊 pill    生活用品    图标 代码 图标 代码     🚪 door 🛏️ bed   🛋️ couch_and_lamp 🚽 toilet   🚿 shower 🛁 bathtub   🛒 shopping_cart      其它物品    图标 代码 图标 代码     🚬 smoking ⚰️ coffin   ⚱️ funeral_urn 🗿 moyai    符号 交通标识    图标 代码 图标 代码     🏧 atm 🚮 put_litter_in_its_place   🚰 potable_water ♿ wheelchair   🚹 mens 🚺 womens   🚻 restroom 🚼 baby_symbol   🚾 wc 🛂 passport_control   🛃 customs 🛄 baggage_claim   🛅 left_luggage      警告    图标 代码 图标 代码     ⚠️ warning 🚸 children_crossing   ⛔ no_entry 🚫 no_entry_sign   🚳 no_bicycles 🚭 no_smoking   🚯 do_not_litter 🚱 🚱   🚷 no_pedestrians 📵 no_mobile_phones   🔞 underage ☢ radioactive   ☣ biohazard      箭头    图标 代码 图标 代码     ⬆️ arrow_up ↗️ arrow_upper_right   ➡️ arrow_right ↘️ arrow_lower_right   ⬇️ arrow_down ↙️ arrow_lower_left   ⬅️ arrow_left ↖️ arrow_upper_left   ↕️ arrow_up_down ↔️ left_right_arrow   ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook   ⤴️ arrow_heading_up ⤵️ arrow_heading_down   🔃 arrows_clockwise 🔄 arrows_counterclockwise   🔙 back 🔚 end   🔛 on 🔜 soon   🔝 top      宗教    图标 代码 图标 代码     🛐 place_of_worship ⚛️ atom_symbol   🕉 om ✡️ star_of_david   ☸️ wheel_of_dharma ☯️ yin_yang   ✝️ latin_cross ☦️ orthodox_cross   ☪️ star_and_crescent ☮️ peace_symbol   🕎 menorah 🔯 six_pointed_star    生肖    图标 代码 图标 代码     ♈ aries ♉ taurus   ♊ gemini ♋ cancer   ♌ leo ♍ virgo   ♎ libra ♏ scorpius   ♐ sagittarius ♑ capricorn   ♒ aquarius ♓ pisces   ⛎ ophiuchus      影像符号    图标 代码 图标 代码     🔀 twisted_rightwards_arrows 🔁 repeat   🔂 repeat_one ▶️ arrow_forward   ⏩ fast_forward ⏭ next_track_button   ⏯ play_or_pause_button ◀️ arrow_backward   ⏪ rewind ⏮️ previous_track_button   🔼 arrow_up_small ⏫ arrow_double_up   🔽 arrow_down_small ⏬ arrow_double_down   ⏸ pause_button ⏹ stop_button   ⏺ record_button 🎦 cinema   🔅 low_brightness 🔆 high_brightness   📶 signal_strength 📳 vibration_mode   📴 mobile_phone_off      数学    图标 代码 图标 代码     ✖️ heavy_multiplication_x ➕ heavy_plus_sign   ➖ heavy_minus_sign ➗ heavy_division_sign    标点符号    图标 代码 图标 代码     ‼️ bangbang ⁉️ interrobang   ❓ question ❔ grey_question   ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark   〰️ wavy_dash      货币    图标 代码 图标 代码     💱 currency_exchange 💲 heavy_dollar_sign    按键符号    图标 代码 图标 代码     #️⃣ hash *️⃣ asterisk   0️⃣ zero 1️⃣ one   2️⃣ two 3️⃣ three   4️⃣ four 5️⃣ five   6️⃣ six 7️⃣ seven   8️⃣ eight 9️⃣ nine   🔟 keycap_ten      字母符号    图标 代码 图标 代码     🔠 capital_abcd 🔡 abcd   🔢 1234 🔣 symbols   🔤 abc 🅰️ a   🆎 ab 🅱️ b   🆑 cl 🆒 cool   🆓 free ℹ️ information_source   🆔 id ⓜ️ m   🆕 new 🆖 ng   🅾️ o2 🆗 ok   🅿️ parking 🆘 sos   🆙 up 🆚 vs   🈁 koko 🈂️ sa   🈷️ u6708 🈶 u6709   🈯 u6307 🉐 ideograph_advantage   🈹 u5272 🈚 u7121   🈲 u7981 🉑 accept   🈸 u7533 🈴 u5408   🈳 u7a7a ㊗️ congratulations   ㊙️ secret 🈺 u55b6   🈵 u6e80      几何符号    图标 代码 图标 代码     🔴 red_circle 🔵 large_blue_circle   ⚫ black_circle ⚪ white_circle   ⬛ black_large_square ⬜ white_large_square   ◼️ black_medium_square ◻️ white_medium_square   ◾ black_medium_small_square ◽ white_medium_small_square   ▪️ black_small_square ▫️ white_small_square   🔶 large_orange_diamond 🔷 large_blue_diamond   🔸 small_orange_diamond 🔹 small_blue_diamond   🔺 small_red_triangle 🔻 small_red_triangle_down   💠 diamond_shape_with_a_dot_inside 🔘 radio_button   🔳 white_square_button 🔲 black_square_button    其它符合    图标 代码 图标 代码     ♻️ recycle ⚜️ fleur_de_lis   🔱 trident 📛 name_badge   🔰 beginner ⭕ o   ✅ white_check_mark ☑️ ballot_box_with_check   ✔️ heavy_check_mark ❌ x   ❎ negative_squared_cross_mark ➰ curly_loop   ➿ loop 〽️ part_alternation_mark   ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star   ❇️ sparkle ©️ copyright   ®️ registered ™️ tm    旗帜 常用旗帜    图标 代码 图标 代码     🏁 checkered_flag 🚩 triangular_flag_on_post   🎌 crossed_flags 🏴 black_flag   🏳 white_flag 🏳️‍🌈 rainbow_flag    国家和地区旗帜    图标 代码 图标 代码     🇦🇩 andorra 🇦🇪 united_arab_emirates   🇦🇫 afghanistan 🇦🇬 antigua_barbuda   🇦🇮 anguilla 🇦🇱 albania   🇦🇲 armenia 🇦🇴 angola   🇦🇶 antarctica 🇦🇷 argentina   🇦🇸 american_samoa 🇦🇹 austria   🇦🇺 australia 🇦🇼 aruba   🇦🇽 aland_islands 🇦🇿 azerbaijan   🇧🇦 bosnia_herzegovina 🇧🇧 barbados   🇧🇩 bangladesh 🇧🇪 belgium   🇧🇫 burkina_faso 🇧🇬 bulgaria   🇧🇭 bahrain 🇧🇮 burundi   🇧🇯 benin 🇧🇱 st_barthelemy   🇧🇲 bermuda 🇧🇳 brunei   🇧🇴 bolivia 🇧🇶 caribbean_netherlands   🇧🇷 brazil 🇧🇸 bahamas   🇧🇹 bhutan 🇧🇼 botswana   🇧🇾 belarus 🇧🇿 belize   🇨🇦 canada 🇨🇨 cocos_islands   🇨🇩 congo_kinshasa 🇨🇫 central_african_republic   🇨🇬 congo_brazzaville 🇨🇭 switzerland   🇨🇮 cote_divoire 🇨🇰 cook_islands   🇨🇱 chile 🇨🇲 cameroon   🇨🇳 cn 🇨🇴 colombia   🇨🇷 costa_rica 🇨🇺 cuba   🇨🇻 cape_verde 🇨🇼 curacao   🇨🇽 christmas_island 🇨🇾 cyprus   🇨🇿 czech_republic 🇩🇪 de   🇩🇯 djibouti 🇩🇰 denmark   🇩🇲 dominica 🇩🇴 dominican_republic   🇩🇿 algeria 🇪🇨 ecuador   🇪🇪 estonia 🇪🇬 egypt   🇪🇭 western_sahara 🇪🇷 eritrea   🇪🇸 es 🇪🇹 ethiopia   🇪🇺 eu european_union 🇫🇮 finland   🇫🇯 fiji 🇫🇰 falkland_islands   🇫🇲 micronesia 🇫🇴 faroe_islands   🇫🇷 fr 🇬🇦 gabon   🇬🇧 gb uk 🇬🇩 grenada   🇬🇪 georgia 🇬🇫 french_guiana   🇬🇬 guernsey 🇬🇭 ghana   🇬🇮 gibraltar 🇬🇱 greenland   🇬🇲 gambia 🇬🇳 guinea   🇬🇵 guadeloupe 🇬🇶 equatorial_guinea   🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands   🇬🇹 guatemala 🇬🇺 guam   🇬🇼 guinea_bissau 🇬🇾 guyana   🇭🇰 hong_kong 🇭🇳 honduras   🇭🇷 croatia 🇭🇹 haiti   🇭🇺 hungary 🇮🇨 canary_islands   🇮🇩 indonesia 🇮🇪 ireland   🇮🇱 israel 🇮🇲 isle_of_man   🇮🇳 india 🇮🇴 british_indian_ocean_territory   🇮🇶 iraq 🇮🇷 iran   🇮🇸 iceland 🇮🇹 it   🇯🇪 jersey 🇯🇲 jamaica   🇯🇴 jordan 🇯🇵 jp   🇰🇪 kenya 🇰🇬 kyrgyzstan   🇰🇭 cambodia 🇰🇮 kiribati   🇰🇲 comoros 🇰🇳 st_kitts_nevis   🇰🇵 north_korea 🇰🇷 kr   🇰🇼 kuwait 🇰🇾 cayman_islands   🇰🇿 kazakhstan 🇱🇦 laos   🇱🇧 lebanon 🇱🇨 st_lucia   🇱🇮 liechtenstein 🇱🇰 sri_lanka   🇱🇷 liberia 🇱🇸 lesotho   🇱🇹 lithuania 🇱🇺 luxembourg   🇱🇻 latvia 🇱🇾 libya   🇲🇦 morocco 🇲🇨 monaco   🇲🇩 moldova 🇲🇪 montenegro   🇲🇬 madagascar 🇲🇭 marshall_islands   🇲🇰 macedonia 🇲🇱 mali   🇲🇲 myanmar 🇲🇳 mongolia   🇲🇴 macau 🇲🇵 northern_mariana_islands   🇲🇶 martinique 🇲🇷 mauritania   🇲🇸 montserrat 🇲🇹 malta   🇲🇺 mauritius 🇲🇻 maldives   🇲🇼 malawi 🇲🇽 mexico   🇲🇾 malaysia 🇲🇿 mozambique   🇳🇦 namibia 🇳🇨 new_caledonia   🇳🇪 niger 🇳🇫 norfolk_island   🇳🇬 nigeria 🇳🇮 nicaragua   🇳🇱 netherlands 🇳🇴 norway   🇳🇵 nepal 🇳🇷 nauru   🇳🇺 niue 🇳🇿 new_zealand   🇴🇲 oman 🇵🇦 panama   🇵🇪 peru 🇵🇫 french_polynesia   🇵🇬 papua_new_guinea 🇵🇭 philippines   🇵🇰 pakistan 🇵🇱 poland   🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands   🇵🇷 puerto_rico 🇵🇸 palestinian_territories   🇵🇹 portugal 🇵🇼 palau   🇵🇾 paraguay 🇶🇦 qatar   🇷🇪 reunion 🇷🇴 romania   🇷🇸 serbia 🇷🇺 ru   🇷🇼 rwanda 🇸🇦 saudi_arabia   🇸🇧 solomon_islands 🇸🇨 seychelles   🇸🇩 sudan 🇸🇪 sweden   🇸🇬 singapore 🇸🇭 st_helena   🇸🇮 slovenia 🇸🇰 slovakia   🇸🇱 sierra_leone 🇸🇲 san_marino   🇸🇳 senegal 🇸🇴 somalia   🇸🇷 suriname 🇸🇸 south_sudan   🇸🇹 sao_tome_principe 🇸🇻 el_salvador   🇸🇽 sint_maarten 🇸🇾 syria   🇸🇿 swaziland 🇹🇨 turks_caicos_islands   🇹🇩 chad 🇹🇫 french_southern_territories   🇹🇬 togo 🇹🇭 thailand   🇹🇯 tajikistan 🇹🇰 tokelau   🇹🇱 timor_leste 🇹🇲 turkmenistan   🇹🇳 tunisia 🇹🇴 tonga   🇹🇷 tr 🇹🇹 trinidad_tobago   🇹🇻 tuvalu 🇹🇼 taiwan   🇹🇿 tanzania 🇺🇦 ukraine   🇺🇬 uganda 🇺🇸 us   🇺🇾 uruguay 🇺🇿 uzbekistan   🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines   🇻🇪 venezuela 🇻🇬 british_virgin_islands   🇻🇮 us_virgin_islands 🇻🇳 vietnam   🇻🇺 vanuatu 🇼🇫 wallis_futuna   🇼🇸 samoa 🇽🇰 kosovo   🇾🇪 yemen 🇾🇹 mayotte   🇿🇦 south_africa 🇿🇲 zambia   🇿🇼 zimbabwe        Emoji 支持 ↩︎\n   ","description":"","title":"Emoji表情库（二）","uri":"/posts/%E5%85%B6%E4%BB%96/emoji%E8%A1%A8%E6%83%85%E5%BA%93%E4%BA%8C/"},{"categories":["posts"],"content":"概念 HTTP\r\r（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。\nHTTPS\r\r（Hypertext Transfer Protocol Secure：超文本传输安全协议或 HTT Pover SSL）是一种透过计算机网络进行安全通信的传输协议。\n区别   HTTP 默认工作在 TCP 协议80 端口\r\r 用户访问网站 以http://\r\r打头 HTTP 协议以明文\r\r方式发送内容，不安全\r\r   注：HTTP 协议不提供任何方式的数据加密，如果攻击者截取了 Web 浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。   HTTPS 默认工作在 TCP 协议443端口\r\r 用户访问网站 以https://\r\r打头 HTTPS 经由 HTTP 进行通信，但利用 SSL（Secure Socket Layer,安全套接字层）/TLS（Transport Layer Security,运输层安全） 来加密\r\r数据包。安全\r\r   注：HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。 你也可以说：HTTPS = HTTP + SSL\nHTTPS 在 HTTP 应用层的基础上使用安全套接字层作为子层。  在讲 HTTPS 原理之前，先介绍下两类密码体制\n 当你需要在一个购物网站输入账号以及密码时，含有你的账号与密码信息的数据会被发送到服务器，在发送的过程中，数据会有两种加密形式—— ..共享密钥加密.. 和 ..公开密钥加密..。\n  共享密钥加密\r\r可以这样理解，服务器为了使数据传输更安全，送给你一把钥匙，这把钥匙可以将数据锁在一个盒子里，当然也可以打开已经锁上的盒子。当数据送至服务器时，服务器会用同样的钥匙打开盒子。这种方法的坏处是，一旦贼人得到钥匙，便可以打开已经锁上的盒子。而公开密钥则避免了这种情况。\n  公开密钥加密\r\r会使用两把钥匙，服务器会发送给你一把只能锁上盒子却不能打开盒子的钥匙，而服务器自己会留一把可以打开盒子的钥匙，这样就避免了钥匙在中途被其他人抢走风险。当服务器发回响应时会用同样的方式，只不过留有可以打开盒子钥匙的人变成了你。\n 密码体制 密码体制 1——对称密钥密码体制\r\r\n对称密钥密码体制又称为..共享秘钥加密..，（加密密钥与解密密钥使用相同的密码）  客户端与服务器使用相同的密码对内容进行加密与解密 但这样也必须将密钥也发给对方，造成了另一个问题（怎样将密钥安全的发给对方？） 任何人只要获取了密钥便可解密密文 一旦第三方攻击者获得了密钥，加密也就毫无意义  密码体制 2——公钥密码体制\r\r\n公钥密码体制又称为 ..公开秘钥加密..，（加密密钥与解密密钥使用不同的密码（但有关联））  加密密钥也称为公钥（public key），是向公众公开的 解密密钥也称为私钥或秘钥（secret key），是需要保密的  简要过程 HTTP\r\r\n 浏览器打开一个 TCP 连接 浏览器发送 HTTP 请求到服务器端 服务器发送 HTTP 回应信息到浏览器 TCP 连接关闭  SSL\r\r\n 验证服务器端 允许客户端和服务器端选择加密算法和密码，确保双方都支持 验证客户端(可选) 使用公钥加密技术来生成共享加密数据 创建一个加密的 SSL 连接 基于该 SSL 连接传递 HTTP 请求  HTTPS\r\r\n 使用 HTTPS 连接时，服务器要求有公钥和签名的证书。 当使用 https 连接，服务器响应初始连接，并提供它所支持的加密方法。 作为回应，客户端选择一个连接方法，并且客户端和服务器端交换证书验证彼此身份。 完成之后，在确保使用相同密钥的情况下传输加密信息，然后关闭连接。 为了提供 https 连接支持，服务器必须有一个公钥证书，该证书包含经过证书机构认证的密钥信息，大部分证书都是通过第三方机构授权的，以保证证书是安全的。   注：如果某个网站要求你填写信用卡信息，首先你要检查该网页是否使用 https 加密连接，如果没有，那么请 ..不要输入.. 任何敏感信息如信用卡号。\n ","description":"","title":"浅谈HTTP与HTTPS","uri":"/posts/%E5%85%B6%E4%BB%96/%E6%B5%85%E8%B0%88http%E4%B8%8Ehttps/"},{"categories":[""],"content":"风筝飞得很高\n是我从未爬上去过的高度\n","description":"","title":"一路向北","uri":"/"},{"categories":["about"],"content":"     -- 用撼动一座岩石的力量 生长 春雨和冰霜同样 只能带来一段故事 沉睡的是这个世界的爱意 如果不能睁开眼睛 就用每一只手触摸你 前世冰冷 来世温暖 只在此生纠缠不清 谁也无法把两种根连在一起 这是我们的命运 哪怕是死后 或者被山羊连根拔起 我的梦在云云俗口中碎成渣 也依然享有最温暖的光阴 在下一个春季 我确信 我的草籽 只需一点山风的沐浴 就能所向披靡\n 最美 就在下一秒\n--  -- ","description":"","title":"About","uri":"/about/"},{"categories":["baidu"],"content":"  ","description":"百度一下","title":"search","uri":"/baidu/"},{"categories":["friends"],"content":"reuixiy\r「一休儿」的生活与技术博客\r\r\r荷戟独彷徨\r爱光学，爱生活，爱创造\r\r\r花着露于方寸间\r松花酿酒，春水煎茶\r\r\rMatNoble\r数学＆计算机 我都爱\r\r\r 本站信息\n网站名称：一路向北\n网站地址：https://ztygcs.github.io/\n网站标志：https://ztygcs.github.io/icons/android-chrome-512x512.png\n网站描述：学习笔记，生活杂碎\n\r\r","description":"欢迎光临 ~ 🐱","title":"友情链接","uri":"/friends/"}]
